// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.4.0
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_ml_bytes_length(s){return s.l;}
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback(f){
    return function(){
     var len = arguments.length;
     if(len > 0){
      var args = new Array(len);
      for(var i = 0; i < len; i++) args[i] = arguments[i];
     }
     else
      args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_ml_debug_info_status(){return 0;}
   var caml_ml_channels = new Array();
   function caml_ml_flush(chanid){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   var caml_sys_fds = new Array(3);
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    var buffer = caml_uint8_array_of_bytes(buffer);
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_build_symbols(toc){
    var symb;
    while(toc)
     if(caml_jsstring_of_string(toc[1][1]) == "SYJS"){symb = toc[1][2]; break;}
     else
      toc = toc[2];
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.toc){
      if(! caml_global_data.symbols)
       caml_global_data.symbols = caml_build_symbols(caml_global_data.toc);
      var nid = caml_global_data.symbols[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg + "\n");
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   var
    cst$2 = "",
    cst_Li = "%Li",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_u = "%u",
    cst_characters = ", characters ",
    cst = ".",
    cst_100 = "100%",
    cst$3 = ">",
    cst$1 = "@[",
    cst$0 = "@{",
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Invalid_argument = "Invalid_argument",
    cst_Lwt = "Lwt.",
    cst_Lwt_s = "Lwt.%s",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_buffer_ml = "buffer.ml",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_false = "false",
    cst_hidden = "hidden",
    cst_move = "move",
    cst_true = "true";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    opt = [0, 103],
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    opt$0 = [0, 1],
    api_function_name = "wakeup";
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _d_ = "output_substring",
    _c_ = cst,
    _a_ = cst_true,
    _b_ = cst_false,
    _e_ = "\\\\",
    _f_ = "\\'",
    _g_ = "\\b",
    _h_ = "\\t",
    _i_ = "\\n",
    _j_ = "\\r",
    _k_ = "nth",
    _l_ = "List.nth",
    _o_ = "String.blit / Bytes.blit_string",
    _n_ = "Bytes.blit",
    _m_ = "String.sub / Bytes.sub",
    _q_ = "Array.fill",
    _p_ = "Array.sub",
    _r_ = "Stdlib.Queue.Empty",
    _w_ = "Buffer.add_substring/add_subbytes",
    _v_ = "Buffer.add: cannot grow buffer",
    _u_ = [0, cst_buffer_ml, 93, 2],
    _t_ = [0, cst_buffer_ml, 94, 2],
    _s_ = "Buffer.sub",
    _F_ = "%c",
    _G_ = "%s",
    _H_ = cst_i,
    _I_ = cst_li,
    _J_ = cst_ni,
    _K_ = cst_Li,
    _L_ = "%f",
    _M_ = "%B",
    _N_ = "%{",
    _O_ = "%}",
    _P_ = "%(",
    _Q_ = "%)",
    _R_ = "%a",
    _S_ = "%t",
    _U_ = "%?",
    _V_ = "%r",
    _W_ = "%_r",
    _X_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _ag_ = [0, cst_camlinternalFormat_ml, 814, 21],
    ___ = [0, cst_camlinternalFormat_ml, 815, 21],
    _ah_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _$_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _ai_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _aa_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _aj_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _ab_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _ak_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _ac_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _ae_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _Y_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _af_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _Z_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _ad_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _be_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bf_ = "Printf: bad conversion %[",
    _bg_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bh_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _bi_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bj_ = "Printf: bad conversion %_",
    _bk_ = cst$0,
    _bl_ = cst$1,
    _bm_ = cst$0,
    _bn_ = cst$1,
    param$0 =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _bo_ = [0, 0, 4],
    _bd_ = "nan",
    _bb_ = "neg_infinity",
    _bc_ = "infinity",
    _ba_ = cst,
    _a0_ = "%+nd",
    _a1_ = "% nd",
    _a3_ = "%+ni",
    _a4_ = "% ni",
    _a5_ = "%nx",
    _a6_ = "%#nx",
    _a7_ = "%nX",
    _a8_ = "%#nX",
    _a9_ = "%no",
    _a__ = "%#no",
    _aZ_ = "%nd",
    _a2_ = cst_ni,
    _a$_ = "%nu",
    _aN_ = "%+ld",
    _aO_ = "% ld",
    _aQ_ = "%+li",
    _aR_ = "% li",
    _aS_ = "%lx",
    _aT_ = "%#lx",
    _aU_ = "%lX",
    _aV_ = "%#lX",
    _aW_ = "%lo",
    _aX_ = "%#lo",
    _aM_ = "%ld",
    _aP_ = cst_li,
    _aY_ = "%lu",
    _aA_ = "%+Ld",
    _aB_ = "% Ld",
    _aD_ = "%+Li",
    _aE_ = "% Li",
    _aF_ = "%Lx",
    _aG_ = "%#Lx",
    _aH_ = "%LX",
    _aI_ = "%#LX",
    _aJ_ = "%Lo",
    _aK_ = "%#Lo",
    _az_ = "%Ld",
    _aC_ = cst_Li,
    _aL_ = "%Lu",
    _an_ = "%+d",
    _ao_ = "% d",
    _aq_ = "%+i",
    _ar_ = "% i",
    _as_ = "%x",
    _at_ = "%#x",
    _au_ = "%X",
    _av_ = "%#X",
    _aw_ = "%o",
    _ax_ = "%#o",
    _am_ = cst_d,
    _ap_ = cst_i,
    _ay_ = cst_u,
    _x_ = "@]",
    _y_ = "@}",
    _z_ = "@?",
    _A_ = "@\n",
    _B_ = "@.",
    _C_ = "@@",
    _D_ = "@%",
    _E_ = "@",
    _al_ = "CamlinternalFormat.Type_mismatch",
    _bs_ = cst$2,
    _bt_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _bP_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _bQ_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _bO_ = "Fatal error: out of memory in uncaught exception handler",
    _bN_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _bL_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _bD_ = "Raised at",
    _bE_ = "Re-raised at",
    _bF_ = "Raised by primitive operation at",
    _bG_ = "Called from",
    _bH_ = " (inlined)",
    _bJ_ = cst$2,
    _bI_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _bK_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _by_ = "Out of memory",
    _bz_ = "Stack overflow",
    _bA_ = "Pattern matching failed",
    _bB_ = "Assertion failed",
    _bC_ = "Undefined recursive module",
    _bu_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _bv_ = cst$2,
    _bw_ = cst$2,
    _bx_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _br_ = [0, [4, 0, 0, 0, 0], cst_d],
    _bp_ = [0, [3, 0, 0], "%S"],
    _bq_ = "_",
    _bM_ =
      [0,
       cst$2,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _b9_ = [3, 0, 3],
    _b__ = cst,
    _b6_ = cst$3,
    _b7_ = "<\/",
    _b8_ = cst$2,
    _b3_ = cst$3,
    _b4_ = "<",
    _b5_ = cst$2,
    _b2_ = "\n",
    _bY_ = cst$2,
    _bZ_ = cst$2,
    _b0_ = cst$2,
    _b1_ = cst$2,
    _bX_ = [0, cst$2],
    _bT_ = cst$2,
    _bU_ = cst$2,
    _bV_ = cst$2,
    _bW_ = cst$2,
    _bS_ = [0, cst$2, 0, cst$2],
    _bR_ = "Stdlib.Format.String_tag",
    _b$_ = "Jsoo_runtime.Error.Exn",
    _cc_ = "canvas",
    _ca_ = "img",
    _cb_ = "Js_of_ocaml__Dom_html.Canvas_not_available",
    _cl_ = [0, 0],
    _cj_ = [0, 0],
    _ck_ = [0, 0],
    _cg_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _ch_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _ci_ = [0, 0],
    _ce_ = cst_Fatal_error_exception,
    _cf_ = "Lwt.Resolution_loop.Canceled",
    _cm_ =
      [0,
       26,
       16,
       226,
       223,
       60,
       144,
       201,
       79,
       158,
       16,
       168,
       166,
       10,
       124,
       50,
       16,
       140,
       20,
       192,
       71,
       176,
       131,
       34,
       144,
       200,
       65,
       141,
       97,
       10,
       10,
       65,
       128,
       192,
       65,
       140,
       160,
       50,
       40,
       12,
       8,
       16,
       131,
       66,
       11,
       57,
       4,
       32,
       132,
       48,
       67,
       65,
       99,
       1,
       140,
       84,
       134,
       72,
       104,
       136,
       22,
       48,
       24,
       196,
       32,
       160,
       65,
       8,
       100,
       132,
       49,
       128,
       179,
       196,
       8,
       134,
       68,
       10,
       33,
       2,
       198,
       3,
       24,
       225,
       12,
       134,
       194,
       198,
       3,
       27,
       88,
       37,
       24,
       180,
       32,
       136,
       188,
       241,
       218,
       88,
       61,
       246,
       8,
       214,
       249,
       166,
       32,
       6,
       8],
    _cn_ =
      [0,
       29,
       20,
       242,
       159,
       60,
       208,
       192,
       124,
       243,
       67,
       7,
       62,
       73,
       172,
       7,
       3,
       228,
       134,
       66,
       8,
       32,
       131,
       36,
       62,
       64,
       66,
       177,
       65,
       12,
       8,
       31,
       4,
       161,
       16,
       96,
       32,
       217,
       236,
       6,
       5,
       1,
       129,
       16,
       68,
       64,
       200,
       65,
       128,
       136,
       65,
       144,
       217,
       45,
       8,
       16,
       96,
       32,
       192,
       84,
       132,
       75,
       1,
       128,
       136,
       136,
       48,
       16,
       104,
       80,
       133,
       1,
       146,
       16,
       160,
       32,
       140,
       80,
       64,
       209,
       12,
       6,
       69,
       68,
       104,
       96,
       52,
       74,
       8,
       65,
       9,
       96,
       149,
       158,
       27,
       33,
       130,
       42,
       21,
       144,
       214,
       134,
       8,
       96,
       134,
       69,
       1,
       70,
       8,
       107,
       59,
       74,
       12,
       10,
       2,
       8,
       80,
       193,
       13,
       103,
       107,
       68,
       48,
       40,
       8,
       64,
       192,
       107,
       59,
       75,
       1,
       161,
       10,
       100,
       34,
       179,
       180,
       180,
       25,
       12,
       6,
       3,
       1,
       130,
       51,
       180,
       184,
       115,
       7,
       176,
       240,
       13,
       13],
    _co_ =
      [0,
       27,
       20,
       242,
       204,
       124,
       226,
       218,
       15,
       156,
       24,
       33,
       6,
       11,
       124,
       160,
       200,
       236,
       99,
       25,
       13,
       22,
       138,
       66,
       44,
       103,
       80,
       104,
       50,
       75,
       4,
       32,
       189,
       104,
       68,
       52,
       16,
       176,
       132,
       24,
       198,
       52,
       32,
       209,
       136,
       50,
       16,
       93,
       173,
       6,
       131,
       33,
       8,
       162,
       8,
       49,
       173,
       6,
       130,
       20,
       10,
       194,
       11,
       181,
       4,
       26,
       33,
       16,
       192,
       132,
       160,
       193,
       12,
       4,
       27,
       12,
       10,
       4,
       37,
       22,
       136,
       65,
       178,
       85,
       42,
       150,
       10,
       68,
       32,
       209,
       72,
       62,
       75,
       1,
       6,
       131,
       2,
       6,
       5,
       76,
       18,
       196,
       70,
       56,
       32,
       65,
       130,
       152,
       10,
       50,
       90,
       12,
       8,
       131,
       229,
       134,
       67,
       2,
       128,
       136,
       96,
       134,
       14,
       100,
       134,
       9,
       96,
       231,
       200,
       41,
       243,
       192,
       21,
       14],
    _cp_ =
      [0,
       18,
       11,
       242,
       156,
       61,
       130,
       26,
       33,
       129,
       96,
       134,
       50,
       66,
       33,
       146,
       25,
       208,
       131,
       16,
       66,
       34,
       161,
       157,
       8,
       58,
       25,
       39,
       67,
       2,
       34,
       88,
       164,
       157,
       8,
       80,
       69,
       2,
       16,
       214,
       165,
       105,
       172,
       6,
       13,
       120,
       167,
       201,
       0,
       7,
       5],
    _cq_ =
      [0,
       14,
       16,
       244,
       208,
       120,
       164,
       17,
       136,
       48,
       74,
       8,
       65,
       5,
       2,
       16,
       232,
       84,
       148,
       168,
       34,
       48,
       75,
       1,
       130,
       16,
       66,
       134,
       72,
       81,
       145,
       64,
       104,
       48,
       32,
       132,
       180,
       16,
       100,
       80,
       26,
       8,
       134,
       66,
       12,
       144,
       193,
       104,
       50,
       31,
       12,
       135,
       116,
       178,
       29,
       198,
       207,
       100,
       11,
       7],
    _cr_ =
      [0,
       22,
       15,
       30,
       251,
       111,
       158,
       8,
       104,
       64,
       225,
       8,
       50,
       67,
       6,
       34,
       88,
       10,
       132,
       82,
       140,
       144,
       163,
       90,
       66,
       8,
       48,
       26,
       16,
       53,
       161,
       4,
       16,
       66,
       4,
       16,
       65,
       173,
       12,
       132,
       16,
       129,
       138,
       67,
       90,
       20,
       65,
       4,
       16,
       130,
       133,
       26,
       208,
       200,
       65,
       146,
       105,
       13,
       99,
       65,
       6,
       4,
       100,
       35,
       16,
       165,
       16,
       192,
       68,
       177,
       64,
       164,
       64,
       193,
       13,
       132,
       40,
       16,
       134,
       67,
       37,
       178,
       25,
       53,
       211,
       222,
       0,
       5,
       8],
    _cs_ =
      [0,
       23,
       20,
       30,
       251,
       44,
       6,
       72,
       96,
       50,
       25,
       12,
       134,
       2,
       21,
       138,
       69,
       34,
       147,
       80,
       96,
       50,
       74,
       33,
       84,
       200,
       68,
       43,
       25,
       12,
       144,
       133,
       33,
       25,
       140,
       132,
       33,
       40,
       48,
       17,
       154,
       217,
       37,
       30,
       198,
       50,
       17,
       79,
       128,
       198,
       33,
       72,
       96,
       34,
       17,
       40,
       150,
       52,
       32,
       193,
       72,
       50,
       25,
       33,
       141,
       8,
       150,
       8,
       124,
       10,
       49,
       210,
       16,
       100,
       50,
       67,
       1,
       146,
       24,
       49,
       30,
       218,
       37,
       240,
       25,
       13,
       8,
       66,
       20,
       4,
       32,
       130,
       144,
       131,
       68,
       32,
       168,
       66,
       48,
       66,
       33,
       160,
       136,
       96,
       66,
       33,
       72,
       80,
       32,
       65,
       16,
       248,
       12,
       135,
       15,
       125,
       196,
       4,
       11],
    _ct_ =
      [0,
       13,
       19,
       147,
       211,
       33,
       130,
       89,
       12,
       132,
       41,
       20,
       6,
       67,
       5,
       42,
       25,
       33,
       6,
       3,
       1,
       130,
       24,
       11,
       60,
       134,
       3,
       4,
       49,
       140,
       6,
       3,
       33,
       103,
       34,
       24,
       8,
       40,
       198,
       40,
       24,
       8,
       64,
       198,
       48,
       24,
       8,
       32,
       199,
       48,
       24,
       8,
       64,
       198,
       42,
       24,
       13,
       12,
       230,
       2,
       37,
       128,
       192,
       96,
       150,
       138,
       96,
       134,
       13,
       84,
       161,
       96,
       160,
       134,
       8,
       100,
       50,
       123,
       104,
       4,
       7],
    _cu_ =
      [0,
       21,
       14,
       20,
       249,
       164,
       48,
       91,
       228,
       135,
       66,
       45,
       192,
       133,
       44,
       18,
       200,
       112,
       49,
       140,
       8,
       131,
       1,
       7,
       3,
       24,
       225,
       17,
       18,
       208,
       89,
       200,
       48,
       20,
       21,
       24,
       198,
       48,
       67,
       100,
       40,
       201,
       11,
       58,
       129,
       2,
       33,
       129,
       89,
       12,
       104,
       96,
       82,
       25,
       53,
       103,
       133,
       67,
       37,
       182,
       24,
       208,
       33,
       111,
       134,
       3,
       33,
       242,
       142,
       124,
       160,
       5,
       12],
    _cv_ =
      [0,
       16,
       14,
       180,
       83,
       129,
       156,
       65,
       130,
       153,
       12,
       233,
       96,
       80,
       25,
       13,
       104,
       66,
       129,
       74,
       33,
       173,
       12,
       138,
       2,
       37,
       156,
       33,
       8,
       32,
       65,
       16,
       208,
       96,
       80,
       16,
       96,
       132,
       17,
       40,
       180,
       32,
       65,
       80,
       42,
       33,
       129,
       72,
       168,
       80,
       67,
       33,
       8,
       68,
       16,
       166,
       12,
       96,
       150,
       2,
       33,
       162,
       154,
       37,
       242,
       128,
       5,
       9],
    _cw_ =
      [0,
       21,
       16,
       179,
       218,
       120,
       52,
       75,
       65,
       224,
       216,
       130,
       130,
       154,
       41,
       6,
       68,
       21,
       6,
       72,
       66,
       128,
       170,
       66,
       8,
       17,
       44,
       132,
       25,
       37,
       129,
       2,
       8,
       80,
       40,
       12,
       10,
       2,
       41,
       4,
       66,
       169,
       5,
       24,
       20,
       20,
       136,
       96,
       148,
       16,
       65,
       129,
       65,
       13,
       138,
       69,
       33,
       8,
       17,
       140,
       6,
       8,
       96,
       33,
       24,
       12,
       6,
       112,
       181,
       64,
       96,
       32,
       192,
       119,
       17,
       16,
       40,
       16,
       96,
       59,
       143,
       134,
       3,
       187,
       88,
       33,
       131,
       219,
       41,
       0,
       5,
       9],
    _cx_ =
      [0,
       19,
       16,
       195,
       217,
       112,
       134,
       53,
       6,
       67,
       100,
       49,
       156,
       42,
       16,
       52,
       67,
       25,
       216,
       130,
       10,
       16,
       208,
       99,
       59,
       16,
       65,
       10,
       2,
       41,
       156,
       96,
       52,
       16,
       65,
       130,
       16,
       124,
       4,
       24,
       16,
       66,
       88,
       8,
       34,
       16,
       66,
       145,
       72,
       65,
       144,
       193,
       44,
       82,
       16,
       65,
       4,
       26,
       12,
       138,
       66,
       8,
       182,
       2,
       17,
       22,
       224,
       96,
       42,
       67,
       33,
       144,
       192,
       96,
       48,
       75,
       36,
       54,
       24,
       12,
       7,
       3,
       68,
       48,
       83,
       134,
       32,
       2,
       7],
    _cy_ =
      [0,
       16,
       15,
       210,
       159,
       36,
       48,
       67,
       228,
       6,
       72,
       124,
       4,
       68,
       33,
       210,
       85,
       2,
       16,
       201,
       77,
       10,
       66,
       37,
       128,
       139,
       96,
       32,
       208,
       65,
       172,
       129,
       4,
       25,
       16,
       172,
       65,
       6,
       4,
       8,
       44,
       241,
       136,
       34,
       88,
       41,
       18,
       131,
       37,
       48,
       40,
       33,
       80,
       217,
       40,
       86,
       29,
       12,
       16,
       200,
       116,
       244,
       7,
       11],
    _cz_ =
      [0,
       19,
       15,
       22,
       249,
       97,
       144,
       249,
       97,
       4,
       99,
       225,
       193,
       12,
       104,
       33,
       8,
       80,
       150,
       67,
       65,
       20,
       133,
       66,
       6,
       130,
       45,
       6,
       2,
       134,
       48,
       82,
       33,
       88,
       67,
       2,
       48,
       40,
       8,
       132,
       66,
       33,
       240,
       131,
       56,
       141,
       96,
       150,
       9,
       208,
       27,
       41,
       4,
       25,
       196,
       31,
       1,
       18,
       130,
       15,
       128,
       232,
       124,
       30,
       128,
       9,
       3],
    _cA_ =
      [0,
       22,
       17,
       163,
       216,
       41,
       208,
       201,
       12,
       20,
       192,
       116,
       50,
       41,
       12,
       10,
       3,
       161,
       128,
       136,
       65,
       178,
       154,
       33,
       10,
       68,
       34,
       32,
       200,
       104,
       166,
       3,
       1,
       8,
       41,
       49,
       130,
       154,
       37,
       157,
       12,
       133,
       3,
       1,
       20,
       222,
       135,
       3,
       1,
       4,
       67,
       123,
       80,
       96,
       42,
       73,
       103,
       25,
       12,
       144,
       130,
       17,
       144,
       206,
       48,
       67,
       162,
       129,
       17,
       104,
       132,
       77,
       12,
       4,
       41,
       13,
       134,
       67,
       1,
       18,
       193,
       45,
       134,
       69,
       1,
       80,
       83,
       165,
       176,
       25,
       15,
       150,
       115,
       224,
       11,
       14],
    _cB_ =
      [0,
       19,
       11,
       227,
       94,
       45,
       128,
       193,
       77,
       134,
       67,
       34,
       160,
       193,
       72,
       49,
       8,
       68,
       48,
       17,
       14,
       4,
       24,
       33,
       20,
       193,
       40,
       69,
       64,
       160,
       80,
       67,
       58,
       130,
       33,
       128,
       201,
       12,
       227,
       129,
       18,
       137,
       103,
       24,
       37,
       129,
       64,
       160,
       244,
       67,
       33,
       144,
       248,
       61,
       9,
       7],
    _cC_ =
      [0,
       25,
       19,
       195,
       31,
       52,
       182,
       67,
       230,
       134,
       66,
       8,
       183,
       201,
       8,
       64,
       192,
       168,
       199,
       8,
       84,
       18,
       136,
       116,
       52,
       75,
       4,
       65,
       4,
       12,
       16,
       201,
       142,
       138,
       76,
       68,
       50,
       67,
       7,
       32,
       208,
       65,
       128,
       137,
       68,
       184,
       82,
       10,
       32,
       192,
       65,
       18,
       138,
       68,
       49,
       129,
       145,
       8,
       65,
       129,
       64,
       160,
       42,
       24,
       192,
       168,
       96,
       132,
       24,
       8,
       32,
       217,
       26,
       17,
       8,
       64,
       138,
       100,
       34,
       16,
       99,
       26,
       20,
       6,
       139,
       104,
       49,
       136,
       32,
       193,
       15,
       24,
       198,
       50,
       17,
       15,
       150,
       24,
       214,
       192,
       124,
       176,
       198,
       208,
       249,
       100,
       48,
       75,
       4,
       62,
       97,
       236,
       0,
       13,
       7],
    _cD_ =
      [0,
       17,
       16,
       163,
       217,
       108,
       62,
       8,
       104,
       48,
       16,
       98,
       10,
       3,
       65,
       64,
       163,
       4,
       48,
       25,
       33,
       16,
       130,
       16,
       34,
       25,
       12,
       136,
       21,
       1,
       6,
       131,
       33,
       10,
       66,
       13,
       16,
       132,
       20,
       144,
       131,
       65,
       128,
       193,
       12,
       8,
       26,
       13,
       16,
       136,
       136,
       35,
       24,
       164,
       50,
       16,
       107,
       24,
       57,
       5,
       140,
       225,
       15,
       6,
       180,
       135,
       131,
       90,
       67,
       199,
       188,
       0,
       15,
       3],
    _cE_ =
      [0,
       13,
       18,
       28,
       216,
       68,
       50,
       83,
       1,
       10,
       69,
       33,
       128,
       192,
       130,
       19,
       24,
       8,
       136,
       131,
       33,
       16,
       170,
       20,
       132,
       24,
       20,
       23,
       74,
       21,
       32,
       201,
       12,
       10,
       177,
       146,
       17,
       13,
       99,
       16,
       132,
       67,
       90,
       73,
       100,
       172,
       96,
       34,
       16,
       107,
       24,
       140,
       4,
       26,
       198,
       3,
       1,
       240,
       193,
       72,
       133,
       75,
       97,
       160,
       233,
       140,
       128,
       2,
       1],
    _cF_ =
      [0,
       20,
       15,
       242,
       11,
       124,
       178,
       25,
       33,
       242,
       72,
       108,
       62,
       65,
       12,
       17,
       64,
       124,
       16,
       136,
       160,
       64,
       248,
       8,
       84,
       32,
       100,
       166,
       67,
       36,
       66,
       208,
       96,
       228,
       67,
       65,
       6,
       55,
       144,
       76,
       8,
       44,
       70,
       162,
       25,
       33,
       5,
       136,
       213,
       129,
       65,
       83,
       250,
       48,
       50,
       33,
       238,
       48,
       40,
       15,
       148,
       67,
       4,
       190,
       89,
       76,
       0,
       17,
       8],
    _cG_ =
      [0,
       11,
       11,
       194,
       145,
       172,
       4,
       27,
       20,
       4,
       25,
       20,
       33,
       17,
       10,
       51,
       136,
       48,
       16,
       167,
       64,
       96,
       32,
       176,
       98,
       33,
       6,
       66,
       10,
       4,
       21,
       2,
       160,
       131,
       6,
       162,
       156,
       0,
       8,
       1],
    _cH_ =
      [0,
       23,
       18,
       242,
       201,
       124,
       240,
       66,
       210,
       249,
       193,
       172,
       108,
       246,
       154,
       198,
       136,
       100,
       134,
       200,
       107,
       99,
       4,
       80,
       192,
       160,
       134,
       181,
       16,
       225,
       16,
       70,
       10,
       198,
       72,
       96,
       66,
       17,
       16,
       32,
       214,
       48,
       75,
       2,
       16,
       133,
       1,
       16,
       137,
       96,
       34,
       17,
       104,
       151,
       194,
       33,
       145,
       64,
       133,
       162,
       88,
       8,
       33,
       75,
       1,
       22,
       130,
       41,
       6,
       69,
       33,
       208,
       224,
       96,
       64,
       160,
       130,
       150,
       3,
       129,
       19,
       16,
       164,
       34,
       156,
       13,
       6,
       8,
       129,
       242,
       12,
       100,
       151,
       205,
       45,
       242,
       128,
       11,
       5],
    _cI_ =
      [0,
       14,
       15,
       30,
       216,
       107,
       73,
       13,
       5,
       139,
       24,
       16,
       134,
       8,
       107,
       16,
       96,
       132,
       17,
       88,
       192,
       96,
       150,
       194,
       132,
       40,
       74,
       37,
       129,
       80,
       65,
       80,
       32,
       130,
       48,
       16,
       65,
       129,
       4,
       33,
       4,
       24,
       37,
       130,
       24,
       8,
       52,
       66,
       33,
       16,
       131,
       2,
       6,
       5,
       1,
       130,
       84,
       20,
       146,
       208,
       96,
       183,
       10,
       116,
       10,
       3],
    _cJ_ =
      [0,
       21,
       15,
       246,
       31,
       1,
       205,
       39,
       176,
       28,
       210,
       24,
       33,
       144,
       192,
       99,
       74,
       21,
       10,
       195,
       1,
       156,
       16,
       64,
       193,
       44,
       134,
       3,
       56,
       171,
       104,
       48,
       24,
       37,
       160,
       200,
       84,
       4,
       41,
       96,
       48,
       68,
       16,
       80,
       40,
       96,
       64,
       192,
       96,
       82,
       20,
       96,
       134,
       131,
       4,
       162,
       16,
       96,
       67,
       89,
       12,
       8,
       33,
       8,
       135,
       195,
       66,
       129,
       64,
       124,
       134,
       66,
       12,
       135,
       193,
       104,
       183,
       203,
       37,
       240,
       0,
       9,
       13],
    _cK_ =
      [0,
       18,
       19,
       178,
       159,
       36,
       150,
       8,
       120,
       166,
       5,
       1,
       224,
       200,
       130,
       130,
       155,
       8,
       82,
       16,
       164,
       34,
       216,
       12,
       6,
       68,
       8,
       49,
       165,
       69,
       10,
       85,
       49,
       136,
       50,
       90,
       33,
       19,
       136,
       40,
       136,
       68,
       34,
       24,
       35,
       16,
       65,
       161,
       89,
       56,
       131,
       37,
       34,
       88,
       35,
       17,
       40,
       132,
       24,
       33,
       19,
       140,
       16,
       161,
       74,
       18,
       198,
       48,
       25,
       33,
       160,
       131,
       24,
       136,
       68,
       80,
       192,
       129,
       20,
       131,
       101,
       64,
       224,
       66,
       18,
       208,
       112,
       50,
       17,
       142,
       22,
       249,
       32,
       7,
       8],
    _cL_ =
      [0,
       20,
       16,
       246,
       88,
       53,
       144,
       208,
       69,
       53,
       161,
       146,
       35,
       165,
       232,
       100,
       34,
       89,
       33,
       21,
       165,
       16,
       137,
       96,
       50,
       86,
       32,
       132,
       21,
       132,
       66,
       41,
       6,
       4,
       20,
       48,
       29,
       45,
       6,
       10,
       68,
       34,
       17,
       12,
       4,
       21,
       36,
       34,
       26,
       33,
       10,
       5,
       1,
       16,
       142,
       65,
       8,
       42,
       8,
       56,
       24,
       16,
       132,
       66,
       8,
       56,
       17,
       21,
       145,
       64,
       112,
       132,
       66,
       37,
       10,
       3,
       161,
       160,
       131,
       65,
       211,
       17,
       142,
       0,
       10,
       1],
    _cM_ =
      [0,
       12,
       15,
       246,
       219,
       33,
       130,
       89,
       20,
       136,
       90,
       33,
       17,
       8,
       100,
       64,
       209,
       8,
       152,
       17,
       108,
       132,
       16,
       132,
       176,
       24,
       12,
       8,
       66,
       17,
       8,
       209,
       12,
       145,
       136,
       230,
       48,
       64,
       136,
       111,
       16,
       136,
       150,
       177,
       129,
       10,
       99,
       67,
       71,
       180,
       128,
       10,
       10],
    _cN_ =
      [0,
       13,
       15,
       194,
       155,
       45,
       128,
       209,
       13,
       136,
       201,
       8,
       80,
       66,
       37,
       4,
       32,
       129,
       10,
       2,
       41,
       16,
       200,
       140,
       6,
       177,
       65,
       3,
       1,
       172,
       100,
       70,
       3,
       90,
       8,
       132,
       32,
       206,
       4,
       41,
       8,
       197,
       5,
       1,
       192,
       201,
       46,
       5,
       9,
       116,
       48,
       31,
       41,
       144,
       1,
       4],
    _cO_ =
      [0,
       18,
       16,
       130,
       159,
       44,
       48,
       123,
       100,
       48,
       67,
       1,
       144,
       216,
       96,
       68,
       32,
       164,
       166,
       2,
       160,
       80,
       16,
       130,
       48,
       83,
       2,
       132,
       20,
       21,
       144,
       192,
       96,
       32,
       201,
       52,
       16,
       133,
       66,
       129,
       66,
       45,
       8,
       32,
       81,
       128,
       192,
       100,
       134,
       9,
       96,
       149,
       3,
       65,
       128,
       214,
       176,
       209,
       78,
       106,
       112,
       53,
       169,
       240,
       206,
       135,
       201,
       12,
       227,
       229,
       22,
       248,
       0,
       8,
       2],
    _cP_ =
      [0,
       15,
       12,
       26,
       240,
       96,
       48,
       91,
       36,
       48,
       24,
       12,
       233,
       65,
       129,
       24,
       12,
       232,
       8,
       33,
       3,
       16,
       157,
       1,
       6,
       4,
       96,
       51,
       131,
       16,
       100,
       33,
       122,
       86,
       136,
       33,
       44,
       6,
       8,
       129,
       144,
       140,
       96,
       134,
       32,
       112,
       56,
       67,
       135,
       32,
       13,
       9],
    _cQ_ =
      [0,
       14,
       20,
       22,
       248,
       100,
       214,
       66,
       16,
       150,
       67,
       33,
       10,
       136,
       129,
       146,
       17,
       76,
       134,
       9,
       65,
       128,
       137,
       96,
       50,
       24,
       8,
       134,
       66,
       34,
       161,
       3,
       33,
       144,
       130,
       16,
       244,
       25,
       12,
       4,
       25,
       21,
       50,
       16,
       96,
       86,
       40,
       8,
       134,
       75,
       68,
       35,
       211,
       4,
       181,
       136,
       80,
       33,
       13,
       226,
       34,
       48,
       67,
       24,
       70,
       33,
       64,
       132,
       55,
       148,
       134,
       9,
       96,
       244,
       138,
       124,
       8,
       6],
    _cR_ =
      [0,
       24,
       11,
       243,
       75,
       124,
       24,
       137,
       100,
       166,
       75,
       104,
       148,
       32,
       160,
       66,
       216,
       33,
       5,
       5,
       66,
       6,
       72,
       107,
       73,
       16,
       65,
       64,
       164,
       42,
       88,
       192,
       136,
       65,
       146,
       85,
       8,
       48,
       67,
       90,
       130,
       37,
       160,
       209,
       13,
       106,
       8,
       134,
       5,
       4,
       168,
       67,
       27,
       24,
       20,
       6,
       10,
       70,
       52,
       25,
       37,
       208,
       249,
       238,
       32,
       19,
       9],
    _cS_ =
      [0,
       15,
       17,
       179,
       94,
       12,
       6,
       3,
       193,
       10,
       67,
       164,
       162,
       16,
       104,
       164,
       40,
       8,
       134,
       67,
       161,
       130,
       24,
       8,
       65,
       82,
       16,
       48,
       17,
       16,
       48,
       24,
       17,
       128,
       168,
       20,
       133,
       64,
       68,
       48,
       68,
       100,
       136,
       74,
       34,
       128,
       192,
       96,
       66,
       27,
       41,
       10,
       8,
       96,
       42,
       24,
       208,
       201,
       72,
       99,
       90,
       216,
       8,
       221,
       13,
       6,
       180,
       145,
       141,
       30,
       195,
       0,
       6,
       1],
    _cT_ =
      [0,
       23,
       13,
       30,
       243,
       129,
       157,
       33,
       160,
       201,
       44,
       144,
       222,
       129,
       66,
       8,
       33,
       3,
       33,
       204,
       96,
       80,
       24,
       20,
       6,
       67,
       152,
       192,
       96,
       32,
       130,
       33,
       131,
       208,
       160,
       64,
       131,
       4,
       176,
       27,
       10,
       133,
       8,
       68,
       50,
       17,
       12,
       138,
       130,
       20,
       10,
       66,
       8,
       48,
       66,
       37,
       6,
       11,
       81,
       4,
       16,
       132,
       86,
       41,
       21,
       132,
       16,
       168,
       80,
       161,
       200,
       35,
       90,
       33,
       194,
       93,
       49,
       240,
       0,
       10,
       11],
    _cU_ =
      [0,
       15,
       15,
       247,
       3,
       161,
       192,
       233,
       76,
       144,
       138,
       65,
       128,
       201,
       8,
       34,
       26,
       12,
       132,
       76,
       20,
       17,
       25,
       12,
       4,
       66,
       20,
       6,
       67,
       1,
       16,
       192,
       135,
       48,
       76,
       17,
       128,
       131,
       36,
       50,
       86,
       32,
       131,
       33,
       6,
       48,
       98,
       12,
       132,
       17,
       12,
       226,
       45,
       10,
       3,
       56,
       217,
       12,
       150,
       225,
       109,
       0,
       4,
       4],
    _cV_ =
      [0,
       23,
       17,
       243,
       10,
       124,
       179,
       24,
       45,
       163,
       93,
       12,
       134,
       131,
       130,
       8,
       66,
       8,
       32,
       208,
       96,
       164,
       40,
       13,
       140,
       104,
       56,
       32,
       65,
       16,
       177,
       99,
       68,
       42,
       148,
       16,
       66,
       22,
       44,
       104,
       54,
       26,
       41,
       105,
       104,
       33,
       73,
       140,
       5,
       139,
       107,
       52,
       58,
       22,
       45,
       14,
       6,
       130,
       138,
       149,
       131,
       66,
       41,
       6,
       234,
       8,
       157,
       8,
       52,
       43,
       12,
       132,
       78,
       132,
       25,
       33,
       16,
       217,
       44,
       232,
       70,
       43,
       24,
       53,
       224,
       208,
       96,
       54,
       122,
       104,
       166,
       192,
       17,
       9],
    _cW_ =
      [0,
       21,
       19,
       147,
       211,
       228,
       7,
       181,
       60,
       22,
       44,
       107,
       24,
       15,
       7,
       180,
       64,
       240,
       108,
       105,
       96,
       166,
       79,
       96,
       64,
       200,
       100,
       54,
       41,
       16,
       80,
       32,
       100,
       48,
       26,
       12,
       8,
       35,
       1,
       146,
       17,
       108,
       134,
       3,
       1,
       144,
       133,
       97,
       146,
       144,
       96,
       134,
       4,
       100,
       34,
       24,
       12,
       6,
       3,
       68,
       42,
       90,
       12,
       16,
       130,
       21,
       8,
       24,
       12,
       6,
       66,
       45,
       160,
       136,
       65,
       16,
       136,
       104,
       40,
       131,
       2,
       129,
       5,
       33,
       160,
       131,
       2,
       51,
       64,
       100,
       52,
       75,
       2,
       194,
       220,
       33,
       128,
       192,
       96,
       62,
       65,
       233,
       160,
       5,
       15],
    _cX_ =
      [0,
       25,
       14,
       211,
       95,
       60,
       48,
       24,
       41,
       243,
       2,
       17,
       64,
       193,
       14,
       156,
       192,
       96,
       50,
       123,
       90,
       2,
       17,
       64,
       192,
       140,
       6,
       72,
       107,
       16,
       108,
       42,
       3,
       132,
       49,
       139,
       80,
       140,
       4,
       42,
       10,
       130,
       25,
       208,
       67,
       1,
       64,
       168,
       12,
       6,
       72,
       107,
       8,
       66,
       54,
       47,
       117,
       128,
       196,
       84,
       7,
       203,
       8,
       70,
       3,
       2,
       62,
       88,
       96,
       48,
       25,
       15,
       150,
       83,
       5,
       190,
       113,
       79,
       144,
       0,
       5,
       7],
    _cY_ =
      [0,
       22,
       20,
       242,
       74,
       116,
       246,
       88,
       45,
       144,
       208,
       96,
       48,
       40,
       12,
       144,
       192,
       66,
       8,
       40,
       16,
       33,
       5,
       33,
       130,
       20,
       20,
       134,
       2,
       20,
       136,
       17,
       44,
       158,
       202,
       33,
       6,
       4,
       17,
       128,
       230,
       33,
       24,
       8,
       50,
       24,
       14,
       104,
       65,
       128,
       193,
       8,
       132,
       17,
       120,
       192,
       96,
       32,
       224,
       179,
       4,
       12,
       4,
       16,
       132,
       32,
       230,
       48,
       24,
       12,
       8,
       35,
       1,
       204,
       66,
       48,
       16,
       164,
       48,
       66,
       173,
       128,
       192,
       66,
       8,
       82,
       16,
       80,
       32,
       140,
       16,
       131,
       98,
       8,
       32,
       164,
       148,
       24,
       49,
       10,
       133,
       65,
       7,
       194,
       53,
       4,
       106,
       10,
       240,
       29,
       12,
       158,
       195,
       165,
       190,
       0,
       11,
       4],
    _cZ_ =
      [0,
       16,
       14,
       147,
       211,
       129,
       141,
       1,
       144,
       224,
       99,
       96,
       112,
       49,
       160,
       48,
       83,
       38,
       176,
       24,
       33,
       128,
       249,
       33,
       128,
       192,
       96,
       134,
       3,
       5,
       162,
       24,
       41,
       18,
       192,
       160,
       180,
       24,
       33,
       4,
       40,
       20,
       4,
       40,
       33,
       129,
       64,
       164,
       50,
       98,
       33,
       26,
       208,
       104,
       62,
       12,
       116,
       2,
       10],
    _c0_ =
      [0,
       20,
       20,
       211,
       217,
       120,
       63,
       152,
       225,
       43,
       22,
       44,
       88,
       198,
       56,
       25,
       63,
       28,
       12,
       8,
       32,
       131,
       179,
       177,
       179,
       81,
       172,
       20,
       200,
       104,
       134,
       3,
       4,
       52,
       32,
       104,
       33,
       8,
       65,
       128,
       162,
       37,
       18,
       169,
       37,
       10,
       4,
       20,
       132,
       32,
       130,
       16,
       192,
       66,
       16,
       232,
       80,
       134,
       69,
       74,
       165,
       67,
       5,
       176,
       67,
       33,
       160,
       192,
       100,
       40,
       67,
       33,
       4,
       69,
       1,
       144,
       200,
       66,
       6,
       5,
       65,
       146,
       80,
       68,
       64,
       192,
       132,
       182,
       16,
       104,
       33,
       8,
       116,
       35,
       144,
       120,
       62,
       3,
       199,
       178,
       200,
       6,
       4],
    _c1_ =
      [0,
       28,
       20,
       227,
       31,
       60,
       160,
       209,
       79,
       156,
       90,
       20,
       135,
       206,
       12,
       144,
       209,
       79,
       150,
       16,
       161,
       130,
       26,
       15,
       150,
       25,
       12,
       22,
       131,
       229,
       132,
       24,
       130,
       160,
       131,
       229,
       134,
       4,
       16,
       148,
       16,
       124,
       176,
       131,
       34,
       128,
       130,
       15,
       150,
       16,
       96,
       40,
       200,
       65,
       242,
       136,
       69,
       50,
       16,
       65,
       242,
       131,
       2,
       130,
       208,
       65,
       20,
       233,
       13,
       10,
       197,
       4,
       176,
       123,
       4,
       161,
       4,
       66,
       6,
       75,
       208,
       217,
       14,
       6,
       8,
       96,
       55,
       161,
       21,
       81,
       138,
       134,
       66,
       208,
       180,
       180,
       67,
       229,
       134,
       177,
       16,
       193,
       238,
       50,
       86,
       48,
       24,
       15,
       148,
       91,
       4,
       48,
       83,
       231,
       20,
       128,
       12,
       1],
    _c2_ =
      [0,
       22,
       13,
       195,
       217,
       124,
       6,
       6,
       130,
       25,
       15,
       128,
       130,
       218,
       27,
       49,
       16,
       206,
       34,
       153,
       33,
       130,
       25,
       212,
       217,
       104,
       66,
       25,
       212,
       32,
       96,
       80,
       67,
       100,
       97,
       8,
       34,
       17,
       12,
       22,
       169,
       81,
       10,
       3,
       33,
       16,
       137,
       96,
       52,
       66,
       132,
       64,
       131,
       1,
       146,
       32,
       65,
       8,
       16,
       161,
       6,
       3,
       231,
       134,
       15,
       121,
       128,
       249,
       229,
       32,
       15,
       2],
    _c3_ =
      [0,
       18,
       16,
       211,
       91,
       53,
       176,
       216,
       108,
       33,
       4,
       13,
       134,
       32,
       100,
       244,
       17,
       46,
       104,
       100,
       32,
       200,
       179,
       66,
       8,
       32,
       137,
       115,
       89,
       44,
       148,
       137,
       65,
       82,
       192,
       84,
       134,
       5,
       1,
       4,
       24,
       16,
       154,
       2,
       20,
       32,
       131,
       34,
       8,
       75,
       16,
       32,
       139,
       108,
       82,
       16,
       108,
       148,
       75,
       33,
       7,
       67,
       97,
       144,
       233,
       204,
       7,
       203,
       41,
       0,
       10,
       2],
    _c4_ =
      [0,
       14,
       15,
       183,
       195,
       36,
       60,
       26,
       12,
       20,
       192,
       66,
       130,
       152,
       12,
       6,
       8,
       130,
       145,
       24,
       37,
       128,
       170,
       33,
       128,
       193,
       12,
       8,
       33,
       8,
       33,
       65,
       8,
       132,
       49,
       6,
       2,
       161,
       80,
       22,
       34,
       89,
       20,
       104,
       88,
       192,
       104,
       44,
       243,
       140,
       4,
       68,
       13,
       227,
       1,
       131,
       216,
       12,
       7,
       193,
       79,
       0,
       3,
       5],
    _c5_ =
      [0,
       17,
       17,
       210,
       159,
       5,
       48,
       31,
       33,
       128,
       192,
       124,
       48,
       32,
       129,
       210,
       80,
       84,
       148,
       208,
       96,
       80,
       66,
       164,
       52,
       24,
       12,
       136,
       16,
       141,
       6,
       3,
       130,
       20,
       136,
       69,
       42,
       27,
       8,
       33,
       27,
       196,
       25,
       8,
       48,
       41,
       206,
       193,
       17,
       108,
       6,
       241,
       144,
       192,
       100,
       148,
       107,
       1,
       17,
       64,
       96,
       58,
       24,
       13,
       135,
       76,
       100,
       62,
       73,
       110,
       128,
       6,
       6],
    _c6_ =
      [0,
       17,
       13,
       247,
       80,
       124,
       176,
       130,
       8,
       198,
       194,
       8,
       48,
       32,
       130,
       8,
       192,
       65,
       6,
       68,
       20,
       144,
       137,
       65,
       5,
       4,
       20,
       179,
       161,
       6,
       68,
       20,
       16,
       206,
       132,
       75,
       48,
       66,
       25,
       208,
       216,
       68,
       34,
       25,
       216,
       201,
       8,
       134,
       113,
       162,
       219,
       37,
       224,
       216,
       124,
       26,
       192,
       7,
       4],
    _c7_ =
      [0,
       20,
       13,
       163,
       223,
       37,
       146,
       24,
       45,
       146,
       92,
       12,
       6,
       75,
       96,
       136,
       20,
       12,
       6,
       9,
       194,
       16,
       96,
       68,
       40,
       65,
       5,
       139,
       8,
       96,
       132,
       21,
       1,
       162,
       112,
       132,
       35,
       66,
       4,
       16,
       88,
       176,
       134,
       136,
       96,
       133,
       4,
       39,
       8,
       66,
       16,
       200,
       96,
       40,
       177,
       97,
       40,
       138,
       5,
       34,
       129,
       78,
       4,
       21,
       6,
       52,
       67,
       1,
       6,
       67,
       71,
       164,
       91,
       229,
       128,
       7,
       4],
    _c8_ =
      [0,
       13,
       16,
       131,
       218,
       11,
       179,
       151,
       103,
       52,
       22,
       118,
       118,
       118,
       52,
       23,
       103,
       103,
       103,
       52,
       22,
       118,
       118,
       118,
       52,
       23,
       103,
       103,
       103,
       52,
       75,
       36,
       184,
       25,
       13,
       24,
       141,
       124,
       130,
       16,
       130,
       8,
       32,
       132,
       161,
       4,
       16,
       66,
       16,
       80,
       65,
       4,
       17,
       128,
       200,
       130,
       144,
       192,
       96,
       182,
       3,
       5,
       50,
       82,
       0,
       6,
       13],
    _c9_ =
      [0,
       19,
       15,
       240,
       83,
       224,
       164,
       24,
       15,
       18,
       193,
       42,
       7,
       72,
       112,
       80,
       28,
       33,
       129,
       8,
       161,
       16,
       224,
       96,
       42,
       27,
       14,
       4,
       16,
       132,
       64,
       137,
       108,
       50,
       32,
       96,
       33,
       15,
       104,
       48,
       68,
       12,
       150,
       136,
       66,
       242,
       22,
       162,
       88,
       61,
       140,
       35,
       17,
       78,
       134,
       113,
       99,
       228,
       134,
       241,
       242,
       77,
       124,
       144,
       7,
       3],
    _c__ =
      [0,
       21,
       20,
       242,
       202,
       124,
       147,
       24,
       15,
       146,
       29,
       15,
       146,
       24,
       41,
       18,
       193,
       44,
       22,
       137,
       104,
       34,
       17,
       76,
       147,
       3,
       65,
       4,
       69,
       36,
       65,
       72,
       107,
       75,
       4,
       198,
       133,
       1,
       189,
       8,
       82,
       17,
       16,
       136,
       27,
       212,
       200,
       96,
       84,
       27,
       198,
       3,
       33,
       8,
       32,
       129,
       188,
       96,
       35,
       81,
       45,
       227,
       1,
       144,
       192,
       130,
       128,
       222,
       48,
       74,
       8,
       136,
       32,
       181,
       160,
       131,
       2,
       192,
       240,
       65,
       19,
       9,
       129,
       224,
       131,
       161,
       7,
       130,
       61,
       7,
       131,
       228,
       7,
       143,
       105,
       160,
       2,
       5],
    _c$_ =
      [0,
       17,
       18,
       240,
       107,
       224,
       48,
       78,
       56,
       91,
       4,
       227,
       129,
       194,
       113,
       192,
       193,
       12,
       19,
       142,
       16,
       136,
       96,
       156,
       108,
       148,
       115,
       97,
       19,
       8,
       108,
       182,
       4,
       16,
       214,
       66,
       130,
       144,
       201,
       12,
       10,
       5,
       66,
       129,
       13,
       68,
       65,
       11,
       108,
       33,
       80,
       124,
       164,
       75,
       228,
       134,
       3,
       229,
       6,
       3,
       229,
       6,
       3,
       229,
       20,
       216,
       1,
       10],
    _da_ =
      [0,
       16,
       17,
       130,
       159,
       36,
       48,
       123,
       12,
       6,
       133,
       34,
       8,
       24,
       8,
       68,
       32,
       96,
       80,
       24,
       12,
       8,
       40,
       13,
       20,
       132,
       65,
       130,
       145,
       8,
       40,
       32,
       160,
       134,
       72,
       104,
       64,
       163,
       33,
       18,
       192,
       168,
       65,
       4,
       8,
       166,
       15,
       96,
       150,
       9,
       120,
       56,
       30,
       14,
       7,
       131,
       152,
       240,
       115,
       30,
       14,
       99,
       199,
       56,
       0,
       1,
       6],
    _db_ =
      [0,
       13,
       12,
       210,
       216,
       53,
       146,
       144,
       96,
       132,
       68,
       33,
       161,
       97,
       12,
       10,
       9,
       100,
       164,
       90,
       169,
       10,
       9,
       68,
       98,
       8,
       65,
       4,
       39,
       16,
       104,
       150,
       113,
       4,
       68,
       8,
       51,
       136,
       48,
       74,
       45,
       20,
       248,
       5,
       2],
    _dc_ =
      [0,
       12,
       11,
       198,
       9,
       65,
       141,
       1,
       16,
       137,
       99,
       65,
       44,
       144,
       198,
       178,
       33,
       12,
       104,
       8,
       33,
       8,
       99,
       74,
       8,
       66,
       208,
       129,
       80,
       25,
       12,
       8,
       132,
       12,
       132,
       40,
       20,
       6,
       67,
       4,
       50,
       25,
       61,
       9,
       1],
    _dd_ =
      [0,
       17,
       13,
       226,
       223,
       36,
       50,
       91,
       193,
       5,
       67,
       1,
       224,
       216,
       135,
       164,
       75,
       36,
       53,
       160,
       132,
       40,
       21,
       53,
       168,
       66,
       33,
       8,
       53,
       160,
       133,
       64,
       160,
       35,
       216,
       20,
       16,
       248,
       66,
       10,
       3,
       228,
       162,
       16,
       124,
       128,
       208,
       124,
       131,
       16,
       14,
       7],
    _de_ =
      [0,
       22,
       13,
       242,
       206,
       124,
       176,
       193,
       88,
       201,
       236,
       176,
       86,
       50,
       26,
       12,
       8,
       41,
       43,
       25,
       8,
       152,
       168,
       16,
       48,
       86,
       50,
       24,
       21,
       136,
       24,
       43,
       25,
       8,
       136,
       20,
       16,
       94,
       203,
       2,
       6,
       195,
       161,
       144,
       143,
       116,
       52,
       40,
       33,
       242,
       66,
       34,
       49,
       64,
       124,
       144,
       200,
       100,
       135,
       201,
       61,
       242,
       128,
       8,
       10],
    _df_ =
      [0,
       17,
       10,
       227,
       159,
       14,
       7,
       194,
       17,
       66,
       31,
       8,
       80,
       35,
       224,
       133,
       4,
       12,
       30,
       132,
       8,
       166,
       180,
       16,
       133,
       2,
       130,
       89,
       212,
       40,
       20,
       144,
       214,
       131,
       223,
       124,
       14,
       1],
    _dg_ =
      [0,
       14,
       10,
       246,
       88,
       12,
       104,
       13,
       148,
       198,
       128,
       133,
       2,
       130,
       24,
       208,
       21,
       76,
       16,
       198,
       194,
       24,
       33,
       141,
       1,
       6,
       4,
       57,
       16,
       160,
       129,
       128,
       133,
       2,
       8,
       32,
       96,
       52,
       27,
       12,
       30,
       202,
       7,
       4],
    _dh_ =
      [0,
       22,
       11,
       162,
       223,
       56,
       50,
       31,
       56,
       42,
       3,
       230,
       18,
       192,
       165,
       242,
       131,
       2,
       129,
       3,
       228,
       18,
       130,
       37,
       6,
       205,
       100,
       34,
       81,
       172,
       17,
       161,
       10,
       5,
       229,
       17,
       177,
       20,
       130,
       41,
       130,
       49,
       160,
       225,
       44,
       24,
       209,
       207,
       128,
       12,
       8],
    _di_ =
      [0,
       9,
       7,
       244,
       224,
       208,
       136,
       68,
       34,
       17,
       10,
       132,
       66,
       33,
       16,
       136,
       116,
       244,
       128,
       2,
       1],
    _dj_ = [0, 12, 3, 246, 150, 10, 132, 27, 218, 64, 6, 1],
    _dk_ = [0, 8, 3, 246, 5, 3, 122, 1, 1],
    _dx_ = "Number of levels: ",
    _du_ = " - ",
    _dv_ = "Current level : ",
    _dw_ = "Number of moves : ",
    _dt_ =
      [0,
       [11, "Touch end ", [4, 0, 0, 0, [12, 32, [4, 0, 0, 0, 0]]]],
       "Touch end %d %d"],
    _ds_ =
      [0,
       [11, "Touch moving: ", [4, 0, 0, 0, [12, 32, [4, 0, 0, 0, 0]]]],
       "Touch moving: %d %d"],
    _dr_ =
      [0,
       [11, "Touch start ", [4, 0, 0, 0, [12, 32, [4, 0, 0, 0, 0]]]],
       "Touch start %d %d"],
    _dn_ = [0, 0, -1],
    _do_ = [0, 0, 1],
    _dp_ = [0, 1, 0],
    _dq_ = [0, -1, 0],
    _dl_ = [0, 0, [0, 4, 0]],
    _dm_ = [0, 2, [0, 3, 0]];
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   var max_int = 2147483647;
   function symbol(s1, s2){
    var
     l1 = caml_ml_string_length(s1),
     l2 = caml_ml_string_length(s2),
     s = caml_create_bytes(l1 + l2 | 0);
    caml_blit_string(s1, 0, s, 0, l1);
    caml_blit_string(s2, 0, s, l1, l2);
    return caml_string_of_bytes(s);
   }
   function string_of_bool(b){return b ? _a_ : _b_;}
   function string_of_float(f){
    var
     s = caml_format_float("%.12g", f),
     l = caml_ml_string_length(s),
     i = 0;
    for(;;){
     if(l <= i) return symbol(s, _c_);
     var match = caml_string_get(s, i), switch$0 = 0;
     if(48 <= match){
      if(58 > match) switch$0 = 1;
     }
     else if(45 === match) switch$0 = 1;
     if(! switch$0) return s;
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   caml_ml_open_descriptor_in(0);
   var
    stdout = caml_ml_open_descriptor_out(1),
    outchan = caml_ml_open_descriptor_out(2);
   function flush_all(param){
    var param$0 = caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_ht_){
      var _hs_ = caml_wrap_exception(_ht_);
      if(_hs_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_hs_, 0);
     }
     var param$0 = l;
    }
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function prerr_string(s){return output_string(outchan, s);}
   function prerr_endline(s){
    output_string(outchan, s);
    caml_ml_output_char(outchan, 10);
    return caml_ml_flush(outchan);
   }
   var exit_function = [0, flush_all];
   function do_at_exit(param){return exit_function[1].call(null, 0);}
   caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1],
      _hr_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_hr_) return _hr_;
     var param$0 = l;
    }
   }
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return invalid_arg(_m_);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return invalid_arg(_n_);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_string(s1, ofs1, s2, ofs2, len);
    return invalid_arg(_o_);
   }
   function make$0(n, c){return caml_string_of_bytes(make(n, c));}
   function sub$0(s, ofs, len){
    return caml_string_of_bytes(sub(caml_bytes_of_string(s), ofs, len));
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call1(f, a[1])),
     _hp_ = l - 1 | 0,
     _ho_ = 1;
    if(_hp_ >= 1){
     var i = _ho_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _hq_ = i + 1 | 0;
      if(_hp_ !== i){var i = _hq_; continue;}
      break;
     }
    }
    return r;
   }
   function create(param){return [0, 0, 0];}
   function clear(s){s[1] = 0; s[2] = 0; return 0;}
   function push(x, s){s[1] = [0, x, s[1]]; s[2] = s[2] + 1 | 0; return 0;}
   function pop_opt(s){
    var match = s[1];
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
   }
   function top_opt(s){
    var match = s[1];
    if(! match) return 0;
    var hd = match[1];
    return [0, hd];
   }
   var Empty = [248, _r_, caml_fresh_oo_id(0)];
   function create$0(param){return [0, 0, 0, 0];}
   function clear$0(q){q[1] = 0; q[2] = 0; q[3] = 0; return 0;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function take(q){
    var _hn_ = q[2];
    if(! _hn_) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = _hn_[1];
    if(_hn_[2]){
     var next = _hn_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
    clear$0(q);
    return content;
   }
   function is_empty(q){return 0 === q[1] ? 1 : 0;}
   function create$1(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = max_string_length < n$0 ? max_string_length : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return sub_string(b[1], 0, b[2]);}
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] < (old_pos + more | 0)){
      new_len[1] = 2 * new_len[1] | 0;
      continue;
     }
     if(max_string_length < new_len[1])
      if((old_pos + more | 0) <= max_string_length)
       new_len[1] = max_string_length;
      else
       failwith(_v_);
     var new_buffer = caml_create_bytes(new_len[1]);
     blit(b[1], 0, new_buffer, 0, b[2]);
     b[1] = new_buffer;
     b[3] = new_len[1];
     if((b[2] + more | 0) > b[3])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
     if((old_pos + more | 0) <= b[3]) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
    }
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0,
     _hl_ = len < min_len ? 1 : 0;
    if(_hl_){
     var
      x = len * 2 | 0,
      new_len = min_len <= x ? x : min_len,
      new_str = caml_create_bytes(new_len);
     blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
     var _hm_ = 0;
    }
    else
     var _hm_ = _hl_;
    return _hm_;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return 0;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    blit_string(s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return 0;
   }
   function buffer_contents(buf){return sub_string(buf[2], 0, buf[1]);}
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return _x_;
       case 1:
        return _y_;
       case 2:
        return _z_;
       case 3:
        return _A_;
       case 4:
        return _B_;
       case 5:
        return _C_;
       default: return _D_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default: var c = formatting_lit[1]; return symbol(_E_, make$0(1, c));
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, _F_);
        var fmtty$0 = fmtty$1;
        continue;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, _G_);
        var fmtty$0 = fmtty$2;
        continue;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, _H_);
        var fmtty$0 = fmtty$3;
        continue;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, _I_);
        var fmtty$0 = fmtty$4;
        continue;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, _J_);
        var fmtty$0 = fmtty$5;
        continue;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, _K_);
        var fmtty$0 = fmtty$6;
        continue;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, _L_);
        var fmtty$0 = fmtty$7;
        continue;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, _M_);
        var fmtty$0 = fmtty$8;
        continue;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, _N_);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, _O_);
        var fmtty$0 = fmtty$9;
        continue;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, _P_);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, _Q_);
        var fmtty$0 = fmtty$10;
        continue;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, _R_);
        var fmtty$0 = fmtty$11;
        continue;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, _S_);
        var fmtty$0 = fmtty$12;
        continue;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, _U_);
        var fmtty$0 = fmtty$13;
        continue;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, _V_);
        var fmtty$0 = fmtty$14;
        continue;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, _W_);
        var fmtty$0 = fmtty$15;
        continue;
     }
    }
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param !== "number")
     switch(param[0]){
       case 0:
        var
         rest = param[1],
         match = fmtty_rel_det(rest),
         de = match[4],
         ed = match[3],
         af = match[2],
         fa = match[1],
         _g2_ = function(param){af(0); return 0;};
        return [0, function(param){fa(0); return 0;}, _g2_, ed, de];
       case 1:
        var
         rest$0 = param[1],
         match$0 = fmtty_rel_det(rest$0),
         de$0 = match$0[4],
         ed$0 = match$0[3],
         af$0 = match$0[2],
         fa$0 = match$0[1],
         _g3_ = function(param){af$0(0); return 0;};
        return [0, function(param){fa$0(0); return 0;}, _g3_, ed$0, de$0];
       case 2:
        var
         rest$1 = param[1],
         match$1 = fmtty_rel_det(rest$1),
         de$1 = match$1[4],
         ed$1 = match$1[3],
         af$1 = match$1[2],
         fa$1 = match$1[1],
         _g4_ = function(param){af$1(0); return 0;};
        return [0, function(param){fa$1(0); return 0;}, _g4_, ed$1, de$1];
       case 3:
        var
         rest$2 = param[1],
         match$2 = fmtty_rel_det(rest$2),
         de$2 = match$2[4],
         ed$2 = match$2[3],
         af$2 = match$2[2],
         fa$2 = match$2[1],
         _g5_ = function(param){af$2(0); return 0;};
        return [0, function(param){fa$2(0); return 0;}, _g5_, ed$2, de$2];
       case 4:
        var
         rest$3 = param[1],
         match$3 = fmtty_rel_det(rest$3),
         de$3 = match$3[4],
         ed$3 = match$3[3],
         af$3 = match$3[2],
         fa$3 = match$3[1],
         _g6_ = function(param){af$3(0); return 0;};
        return [0, function(param){fa$3(0); return 0;}, _g6_, ed$3, de$3];
       case 5:
        var
         rest$4 = param[1],
         match$4 = fmtty_rel_det(rest$4),
         de$4 = match$4[4],
         ed$4 = match$4[3],
         af$4 = match$4[2],
         fa$4 = match$4[1],
         _g7_ = function(param){af$4(0); return 0;};
        return [0, function(param){fa$4(0); return 0;}, _g7_, ed$4, de$4];
       case 6:
        var
         rest$5 = param[1],
         match$5 = fmtty_rel_det(rest$5),
         de$5 = match$5[4],
         ed$5 = match$5[3],
         af$5 = match$5[2],
         fa$5 = match$5[1],
         _g8_ = function(param){af$5(0); return 0;};
        return [0, function(param){fa$5(0); return 0;}, _g8_, ed$5, de$5];
       case 7:
        var
         rest$6 = param[1],
         match$6 = fmtty_rel_det(rest$6),
         de$6 = match$6[4],
         ed$6 = match$6[3],
         af$6 = match$6[2],
         fa$6 = match$6[1],
         _g9_ = function(param){af$6(0); return 0;};
        return [0, function(param){fa$6(0); return 0;}, _g9_, ed$6, de$6];
       case 8:
        var
         rest$7 = param[2],
         match$7 = fmtty_rel_det(rest$7),
         de$7 = match$7[4],
         ed$7 = match$7[3],
         af$7 = match$7[2],
         fa$7 = match$7[1],
         _g__ = function(param){af$7(0); return 0;};
        return [0, function(param){fa$7(0); return 0;}, _g__, ed$7, de$7];
       case 9:
        var
         rest$8 = param[3],
         ty2 = param[2],
         ty1 = param[1],
         match$8 = fmtty_rel_det(rest$8),
         de$8 = match$8[4],
         ed$8 = match$8[3],
         af$8 = match$8[2],
         fa$8 = match$8[1],
         ty = trans(symm(ty1), ty2),
         match$9 = fmtty_rel_det(ty),
         jd = match$9[4],
         dj = match$9[3],
         ga = match$9[2],
         ag = match$9[1],
         _g$_ = function(param){jd(0); de$8(0); return 0;},
         _ha_ = function(param){ed$8(0); dj(0); return 0;},
         _hb_ = function(param){ga(0); af$8(0); return 0;};
        return [0,
                function(param){fa$8(0); ag(0); return 0;},
                _hb_,
                _ha_,
                _g$_];
       case 10:
        var
         rest$9 = param[1],
         match$10 = fmtty_rel_det(rest$9),
         de$9 = match$10[4],
         ed$9 = match$10[3],
         af$9 = match$10[2],
         fa$9 = match$10[1],
         _hc_ = function(param){af$9(0); return 0;};
        return [0, function(param){fa$9(0); return 0;}, _hc_, ed$9, de$9];
       case 11:
        var
         rest$10 = param[1],
         match$11 = fmtty_rel_det(rest$10),
         de$10 = match$11[4],
         ed$10 = match$11[3],
         af$10 = match$11[2],
         fa$10 = match$11[1],
         _hd_ = function(param){af$10(0); return 0;};
        return [0, function(param){fa$10(0); return 0;}, _hd_, ed$10, de$10];
       case 12:
        var
         rest$11 = param[1],
         match$12 = fmtty_rel_det(rest$11),
         de$11 = match$12[4],
         ed$11 = match$12[3],
         af$11 = match$12[2],
         fa$11 = match$12[1],
         _he_ = function(param){af$11(0); return 0;};
        return [0, function(param){fa$11(0); return 0;}, _he_, ed$11, de$11];
       case 13:
        var
         rest$12 = param[1],
         match$13 = fmtty_rel_det(rest$12),
         de$12 = match$13[4],
         ed$12 = match$13[3],
         af$12 = match$13[2],
         fa$12 = match$13[1],
         _hf_ = function(param){de$12(0); return 0;},
         _hg_ = function(param){ed$12(0); return 0;},
         _hh_ = function(param){af$12(0); return 0;};
        return [0, function(param){fa$12(0); return 0;}, _hh_, _hg_, _hf_];
       default:
        var
         rest$13 = param[1],
         match$14 = fmtty_rel_det(rest$13),
         de$13 = match$14[4],
         ed$13 = match$14[3],
         af$13 = match$14[2],
         fa$13 = match$14[1],
         _hi_ = function(param){de$13(0); return 0;},
         _hj_ = function(param){ed$13(0); return 0;},
         _hk_ = function(param){af$13(0); return 0;};
        return [0, function(param){fa$13(0); return 0;}, _hk_, _hj_, _hi_];
     }
    function _gZ_(param){return 0;}
    function _g0_(param){return 0;}
    function _g1_(param){return 0;}
    return [0, function(param){return 0;}, _g1_, _g0_, _gZ_];
   }
   function trans(ty1, ty2){
    var switch$0 = 0;
    if(typeof ty1 === "number"){
     if(typeof ty2 === "number") return 0;
     switch(ty2[0]){
       case 10: break;
       case 11:
        switch$0 = 1; break;
       case 12:
        switch$0 = 2; break;
       case 13:
        switch$0 = 3; break;
       case 14:
        switch$0 = 4; break;
       case 8:
        switch$0 = 5; break;
       case 9:
        switch$0 = 6; break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
     }
    }
    else
     switch(ty1[0]){
       case 0:
        var rest1 = ty1[1], switch$1 = 0;
        if(typeof ty2 === "number")
         switch$1 = 1;
        else
         switch(ty2[0]){
           case 0:
            var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$1 = 1;
         }
        if(switch$1) switch$0 = 7;
        break;
       case 1:
        var rest1$0 = ty1[1], switch$2 = 0;
        if(typeof ty2 === "number")
         switch$2 = 1;
        else
         switch(ty2[0]){
           case 1:
            var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$2 = 1;
         }
        if(switch$2) switch$0 = 7;
        break;
       case 2:
        var rest1$1 = ty1[1], switch$3 = 0;
        if(typeof ty2 === "number")
         switch$3 = 1;
        else
         switch(ty2[0]){
           case 2:
            var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$3 = 1;
         }
        if(switch$3) switch$0 = 7;
        break;
       case 3:
        var rest1$2 = ty1[1], switch$4 = 0;
        if(typeof ty2 === "number")
         switch$4 = 1;
        else
         switch(ty2[0]){
           case 3:
            var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$4 = 1;
         }
        if(switch$4) switch$0 = 7;
        break;
       case 4:
        var rest1$3 = ty1[1], switch$5 = 0;
        if(typeof ty2 === "number")
         switch$5 = 1;
        else
         switch(ty2[0]){
           case 4:
            var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$5 = 1;
         }
        if(switch$5) switch$0 = 7;
        break;
       case 5:
        var rest1$4 = ty1[1], switch$6 = 0;
        if(typeof ty2 === "number")
         switch$6 = 1;
        else
         switch(ty2[0]){
           case 5:
            var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$6 = 1;
         }
        if(switch$6) switch$0 = 7;
        break;
       case 6:
        var rest1$5 = ty1[1], switch$7 = 0;
        if(typeof ty2 === "number")
         switch$7 = 1;
        else
         switch(ty2[0]){
           case 6:
            var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$7 = 1;
         }
        if(switch$7) switch$0 = 7;
        break;
       case 7:
        var rest1$6 = ty1[1], switch$8 = 0;
        if(typeof ty2 === "number")
         switch$8 = 1;
        else
         switch(ty2[0]){
           case 7:
            var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$8 = 1;
         }
        if(switch$8) switch$0 = 7;
        break;
       case 8:
        var rest1$7 = ty1[2], ty1$0 = ty1[1], switch$9 = 0;
        if(typeof ty2 === "number")
         switch$9 = 1;
        else
         switch(ty2[0]){
           case 8:
            var
             rest2$7 = ty2[2],
             ty2$0 = ty2[1],
             _gY_ = trans(rest1$7, rest2$7);
            return [8, trans(ty1$0, ty2$0), _gY_];
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$9 = 1;
         }
        if(switch$9)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ae_], 1);
        break;
       case 9:
        var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1], switch$10 = 0;
        if(typeof ty2 === "number")
         switch$10 = 1;
        else
         switch(ty2[0]){
           case 8:
            switch$0 = 5; break;
           case 9:
            var
             rest2$8 = ty2[3],
             ty22 = ty2[2],
             ty21 = ty2[1],
             ty = trans(symm(ty12), ty21),
             match = fmtty_rel_det(ty),
             f4 = match[4],
             f2 = match[2];
            f2(0);
            f4(0);
            return [9, ty11, ty22, trans(rest1$8, rest2$8)];
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$10 = 1;
         }
        if(switch$10)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _af_], 1);
        break;
       case 10:
        var rest1$9 = ty1[1];
        if(typeof ty2 !== "number" && 10 === ty2[0]){
         var rest2$9 = ty2[1];
         return [10, trans(rest1$9, rest2$9)];
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ag_], 1);
       case 11:
        var rest1$10 = ty1[1], switch$11 = 0;
        if(typeof ty2 === "number")
         switch$11 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            var rest2$10 = ty2[1]; return [11, trans(rest1$10, rest2$10)];
           default: switch$11 = 1;
         }
        if(switch$11)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ah_], 1);
        break;
       case 12:
        var rest1$11 = ty1[1], switch$12 = 0;
        if(typeof ty2 === "number")
         switch$12 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            var rest2$11 = ty2[1]; return [12, trans(rest1$11, rest2$11)];
           default: switch$12 = 1;
         }
        if(switch$12)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ai_], 1);
        break;
       case 13:
        var rest1$12 = ty1[1], switch$13 = 0;
        if(typeof ty2 === "number")
         switch$13 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            var rest2$12 = ty2[1]; return [13, trans(rest1$12, rest2$12)];
           default: switch$13 = 1;
         }
        if(switch$13)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aj_], 1);
        break;
       default:
        var rest1$13 = ty1[1], switch$14 = 0;
        if(typeof ty2 === "number")
         switch$14 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            var rest2$13 = ty2[1]; return [14, trans(rest1$13, rest2$13)];
           default: switch$14 = 1;
         }
        if(switch$14)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ak_], 1);
     }
    switch(switch$0){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, ___], 1);
      case 1:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _$_], 1);
      case 2:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
      case 3:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
      case 4:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ac_], 1);
      case 5:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
      case 6:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
      default:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ad_], 1);
    }
   }
   var Type_mismatch = [248, _al_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _gW_ = [0, erase_rel(sub_fmtty1)];
        if(caml_notequal([0, erase_rel(sub_fmtty$1)], _gW_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 = type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _gX_ = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = _gX_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _gX_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty0);
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 = type_format_gen(rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty0);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _gU_ = [0, erase_rel(sub1_fmtty)];
        if(caml_notequal([0, erase_rel(sub1_fmtty$0)], _gU_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _gV_ = [0, erase_rel(sub2_fmtty$1)];
        if(caml_notequal([0, erase_rel(sub2_fmtty$2)], _gV_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = abs(width);
    if(width$0 <= len) return str;
    var _gT_ = 2 === padty$0 ? 48 : 32, res = make(width$0, _gT_);
    switch(padty$0){
      case 0:
       blit_string(str, 0, res, 0, len); break;
      case 1:
       blit_string(str, 0, res, width$0 - len | 0, len); break;
      default:
       var switch$0 = 0;
       if(0 < len){
        var switch$1 = 0;
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0)){switch$0 = 1; switch$1 = 1;}
        if(! switch$1){
         caml_bytes_set(res, 0, caml_string_get(str, 0));
         blit_string(str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        }
       }
       else
        switch$0 = 1;
       if(switch$0){
        var switch$2 = 0;
        if(1 < len && 48 === caml_string_get(str, 0)){
         var switch$3 = 0;
         if(120 === caml_string_get(str, 1) || 88 === caml_string_get(str, 1))
          switch$3 = 1;
         if(switch$3){
          caml_bytes_set(res, 1, caml_string_get(str, 1));
          blit_string(str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
          switch$2 = 1;
         }
        }
        if(! switch$2) blit_string(str, 0, res, width$0 - len | 0, len);
       }
    }
    return caml_string_of_bytes(res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = abs(prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0),
     switch$0 = 0;
    if(58 <= c){
     if(71 <= c){
      if(5 >= c - 97 >>> 0) switch$0 = 1;
     }
     else if(65 <= c) switch$0 = 1;
    }
    else{
     var switch$1 = 0;
     if(32 === c)
      switch$1 = 1;
     else if(43 <= c)
      switch(c - 43 | 0){
        case 5:
         if(len < (prec$0 + 2 | 0) && 1 < len){
          var switch$2 = 0;
          if
           (120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
           switch$2 = 1;
          if(! switch$2){
           var res$1 = make(prec$0 + 2 | 0, 48);
           caml_bytes_set(res$1, 1, caml_string_get(str, 1));
           blit_string(str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
           return caml_string_of_bytes(res$1);
          }
         }
         switch$0 = 1;
         break;
        case 0:
        case 2:
         switch$1 = 1; break;
        case 1:
        case 3:
        case 4: break;
        default: switch$0 = 1;
      }
     if(switch$1 && len < (prec$0 + 1 | 0)){
      var res$0 = make(prec$0 + 1 | 0, 48);
      caml_bytes_set(res$0, 0, c);
      blit_string(str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
      return caml_string_of_bytes(res$0);
     }
    }
    if(switch$0 && len < prec$0){
     var res = make(prec$0, 48);
     blit_string(str, 0, res, prec$0 - len | 0, len);
     return caml_string_of_bytes(res);
    }
    return str;
   }
   function string_to_caml_string(str){
    var n$0 = caml_ml_string_length(str), i$1 = 0;
    for(;;){
     if(n$0 <= i$1)
      var str$0 = str;
     else{
      var _gR_ = caml_string_unsafe_get(str, i$1) - 32 | 0, switch$0 = 0;
      if(59 < _gR_ >>> 0){
       if(33 < _gR_ - 61 >>> 0) switch$0 = 1;
      }
      else if(2 === _gR_) switch$0 = 1;
      if(! switch$0){var i$2 = i$1 + 1 | 0, i$1 = i$2; continue;}
      var
       s$0 = caml_bytes_of_string(str),
       n = [0, 0],
       _gK_ = caml_ml_bytes_length(s$0) - 1 | 0,
       _gJ_ = 0;
      if(_gK_ >= 0){
       var i$0 = _gJ_;
       for(;;){
        var match = caml_bytes_unsafe_get(s$0, i$0), switch$1 = 0;
        if(32 <= match){
         var _gO_ = match - 34 | 0, switch$2 = 0;
         if(58 < _gO_ >>> 0){
          if(93 > _gO_) switch$2 = 1;
         }
         else if(56 < _gO_ - 1 >>> 0) switch$1 = 1; else switch$2 = 1;
         if(switch$2){var _gP_ = 1; switch$1 = 2;}
        }
        else
         if(11 <= match){
          if(13 === match) switch$1 = 1;
         }
         else if(8 <= match) switch$1 = 1;
        switch(switch$1){
          case 0:
           var _gP_ = 4; break;
          case 1:
           var _gP_ = 2; break;
        }
        n[1] = n[1] + _gP_ | 0;
        var _gQ_ = i$0 + 1 | 0;
        if(_gK_ !== i$0){var i$0 = _gQ_; continue;}
        break;
       }
      }
      if(n[1] === caml_ml_bytes_length(s$0)){
       var len = caml_ml_bytes_length(s$0), r = caml_create_bytes(len);
       caml_blit_bytes(s$0, 0, r, 0, len);
       var _gS_ = r;
      }
      else{
       var s = caml_create_bytes(n[1]);
       n[1] = 0;
       var _gM_ = caml_ml_bytes_length(s$0) - 1 | 0, _gL_ = 0;
       if(_gM_ >= 0){
        var i = _gL_;
        for(;;){
         var c = caml_bytes_unsafe_get(s$0, i), switch$3 = 0;
         if(35 <= c)
          if(92 === c)
           switch$3 = 2;
          else if(127 <= c) switch$3 = 1; else switch$3 = 3;
         else if(32 <= c)
          if(34 <= c) switch$3 = 2; else switch$3 = 3;
         else if(14 <= c)
          switch$3 = 1;
         else
          switch(c){
            case 8:
             caml_bytes_unsafe_set(s, n[1], 92);
             n[1]++;
             caml_bytes_unsafe_set(s, n[1], 98);
             break;
            case 9:
             caml_bytes_unsafe_set(s, n[1], 92);
             n[1]++;
             caml_bytes_unsafe_set(s, n[1], 116);
             break;
            case 10:
             caml_bytes_unsafe_set(s, n[1], 92);
             n[1]++;
             caml_bytes_unsafe_set(s, n[1], 110);
             break;
            case 13:
             caml_bytes_unsafe_set(s, n[1], 92);
             n[1]++;
             caml_bytes_unsafe_set(s, n[1], 114);
             break;
            default: switch$3 = 1;
          }
         switch(switch$3){
           case 1:
            caml_bytes_unsafe_set(s, n[1], 92);
            n[1]++;
            caml_bytes_unsafe_set(s, n[1], 48 + (c / 100 | 0) | 0);
            n[1]++;
            caml_bytes_unsafe_set(s, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
            n[1]++;
            caml_bytes_unsafe_set(s, n[1], 48 + (c % 10 | 0) | 0);
            break;
           case 2:
            caml_bytes_unsafe_set(s, n[1], 92);
            n[1]++;
            caml_bytes_unsafe_set(s, n[1], c);
            break;
           case 3:
            caml_bytes_unsafe_set(s, n[1], c); break;
         }
         n[1]++;
         var _gN_ = i + 1 | 0;
         if(_gM_ !== i){var i = _gN_; continue;}
         break;
        }
       }
       var _gS_ = s;
      }
      var str$0 = caml_string_of_bytes(_gS_);
     }
     var l = caml_ml_string_length(str$0), res = make(l + 2 | 0, 34);
     caml_blit_string(str$0, 0, res, 1, l);
     return caml_string_of_bytes(res);
    }
   }
   function format_of_fconv(fconv, prec){
    var prec$0 = abs(prec), sth = opt[1];
    switch(fconv[2]){
      case 0:
       var symb = 102; break;
      case 1:
       var symb = 101; break;
      case 2:
       var symb = 69; break;
      case 3:
       var symb = 103; break;
      case 4:
       var symb = 71; break;
      case 5:
       var symb = sth; break;
      case 6:
       var symb = 104; break;
      case 7:
       var symb = 72; break;
      default: var symb = 70;
    }
    var buf = buffer_create(16);
    buffer_add_char(buf, 37);
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) buffer_add_char(buf, 35);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, "" + prec$0);
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _gE_ = caml_ml_string_length(s) - 1 | 0, _gD_ = 0;
    if(_gE_ >= 0){
     var i$0 = _gD_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _gI_ = i$0 + 1 | 0;
      if(_gE_ !== i$0){var i$0 = _gI_; continue;}
      break;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return 0;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _gG_ = caml_ml_string_length(s) - 1 | 0,
     _gF_ = 0;
    if(_gG_ >= 0){
     var i = _gF_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1] += -1; put(c);}
      var _gH_ = i + 1 | 0;
      if(_gG_ !== i){var i = _gH_; continue;}
      break;
     }
    }
    return caml_string_of_bytes(buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _gC_ = _an_; break;
      case 2:
       var _gC_ = _ao_; break;
      case 4:
       var _gC_ = _aq_; break;
      case 5:
       var _gC_ = _ar_; break;
      case 6:
       var _gC_ = _as_; break;
      case 7:
       var _gC_ = _at_; break;
      case 8:
       var _gC_ = _au_; break;
      case 9:
       var _gC_ = _av_; break;
      case 10:
       var _gC_ = _aw_; break;
      case 11:
       var _gC_ = _ax_; break;
      case 0:
      case 13:
       var _gC_ = _am_; break;
      case 3:
      case 14:
       var _gC_ = _ap_; break;
      default: var _gC_ = _ay_;
    }
    return transform_int_alt(iconv, caml_format_int(_gC_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _gB_ = _aN_; break;
      case 2:
       var _gB_ = _aO_; break;
      case 4:
       var _gB_ = _aQ_; break;
      case 5:
       var _gB_ = _aR_; break;
      case 6:
       var _gB_ = _aS_; break;
      case 7:
       var _gB_ = _aT_; break;
      case 8:
       var _gB_ = _aU_; break;
      case 9:
       var _gB_ = _aV_; break;
      case 10:
       var _gB_ = _aW_; break;
      case 11:
       var _gB_ = _aX_; break;
      case 0:
      case 13:
       var _gB_ = _aM_; break;
      case 3:
      case 14:
       var _gB_ = _aP_; break;
      default: var _gB_ = _aY_;
    }
    return transform_int_alt(iconv, caml_format_int(_gB_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _gA_ = _a0_; break;
      case 2:
       var _gA_ = _a1_; break;
      case 4:
       var _gA_ = _a3_; break;
      case 5:
       var _gA_ = _a4_; break;
      case 6:
       var _gA_ = _a5_; break;
      case 7:
       var _gA_ = _a6_; break;
      case 8:
       var _gA_ = _a7_; break;
      case 9:
       var _gA_ = _a8_; break;
      case 10:
       var _gA_ = _a9_; break;
      case 11:
       var _gA_ = _a__; break;
      case 0:
      case 13:
       var _gA_ = _aZ_; break;
      case 3:
      case 14:
       var _gA_ = _a2_; break;
      default: var _gA_ = _a$_;
    }
    return transform_int_alt(iconv, caml_format_int(_gA_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _gz_ = _aA_; break;
      case 2:
       var _gz_ = _aB_; break;
      case 4:
       var _gz_ = _aD_; break;
      case 5:
       var _gz_ = _aE_; break;
      case 6:
       var _gz_ = _aF_; break;
      case 7:
       var _gz_ = _aG_; break;
      case 8:
       var _gz_ = _aH_; break;
      case 9:
       var _gz_ = _aI_; break;
      case 10:
       var _gz_ = _aJ_; break;
      case 11:
       var _gz_ = _aK_; break;
      case 0:
      case 13:
       var _gz_ = _az_; break;
      case 3:
      case 14:
       var _gz_ = _aC_; break;
      default: var _gz_ = _aL_;
    }
    return transform_int_alt(iconv, caml_int64_format(_gz_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = caml_classify_float(x);
     return 3 === match ? x < 0. ? _bb_ : _bc_ : 4 <= match ? _bd_ : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i$0 = 0;
       for(;;){
        if(i$0 === len)
         var _gx_ = 0;
        else{
         var _gw_ = caml_string_get(str, i$0) - 46 | 0, switch$0 = 0;
         if(23 < _gw_ >>> 0){
          if(55 === _gw_) switch$0 = 1;
         }
         else if(21 < _gw_ - 1 >>> 0) switch$0 = 1;
         if(! switch$0){var i$1 = i$0 + 1 | 0, i$0 = i$1; continue;}
         var _gx_ = 1;
        }
        var _gy_ = _gx_ ? str : symbol(str, _ba_);
        return caml_special_val(_gy_);
       }
      case 6:
       return hex(0);
      case 7:
       var
        s$0 = hex(0),
        s = caml_bytes_of_string(s$0),
        l = caml_ml_bytes_length(s);
       if(0 === l)
        var _gv_ = s;
       else{
        var r = caml_create_bytes(l), _gs_ = l - 1 | 0, _gr_ = 0;
        if(_gs_ >= 0){
         var i = _gr_;
         for(;;){
          var
           c = caml_bytes_unsafe_get(s, i),
           _gt_ = 25 < c - 97 >>> 0 ? c : c - 32 | 0;
          caml_bytes_unsafe_set(r, i, _gt_);
          var _gu_ = i + 1 | 0;
          if(_gs_ !== i){var i = _gu_; continue;}
          break;
         }
        }
        var _gv_ = r;
       }
       return caml_string_of_bytes(_gv_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var switch$0 = 0;
         if(40 <= c)
          if(92 === c)
           var str = _e_;
          else if(127 <= c) switch$0 = 1; else switch$0 = 2;
         else if(32 <= c)
          if(39 <= c) var str = _f_; else switch$0 = 2;
         else if(14 <= c)
          switch$0 = 1;
         else
          switch(c){
            case 8:
             var str = _g_; break;
            case 9:
             var str = _h_; break;
            case 10:
             var str = _i_; break;
            case 13:
             var str = _j_; break;
            default: switch$0 = 1;
          }
         switch(switch$0){
           case 1:
            var s = caml_create_bytes(4);
            caml_bytes_unsafe_set(s, 0, 92);
            caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
            caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
            caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
            var str = caml_string_of_bytes(s);
            break;
           case 2:
            var s$0 = caml_create_bytes(1);
            caml_bytes_unsafe_set(s$0, 0, c);
            var str = caml_string_of_bytes(s$0);
            break;
         }
         var l = caml_ml_string_length(str), res = make(l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_string_of_bytes(res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
        var
         rest$9 = fmt$0[1],
         acc$1 = [7, acc$0],
         acc$0 = acc$1,
         fmt$0 = rest$9;
        continue;
       case 11:
        var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
         acc$2 = [2, acc$0, str],
         acc$0 = acc$2,
         fmt$0 = rest$10;
        continue;
       case 12:
        var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
         acc$3 = [3, acc$0, chr],
         acc$0 = acc$3,
         fmt$0 = rest$11;
        continue;
       case 13:
        var rest$12 = fmt$0[3], sub_fmtty = fmt$0[2], buf = buffer_create(16);
        bprint_fmtty(buf, sub_fmtty);
        var ty = buffer_contents(buf);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var
          fmt$0 = param[1],
          fmtty$0 = erase_rel(symm(fmtty)),
          _gq_ = type_format_gen(fmt$0, fmtty$0);
         if(typeof _gq_[2] !== "number")
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         var fmt = _gq_[1];
         return make_printf(k$0, acc$0, concat_fmt(fmt, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit],
         acc$0 = acc$4,
         fmt$0 = rest$16;
        continue;
       case 18:
        var _go_ = fmt$0[1];
        if(0 === _go_[0]){
         var
          rest$17 = fmt$0[2],
          fmt$1 = _go_[1][1],
          k$3 =
            function(acc, k, rest){
             function k$0(kacc){
              return make_printf(k, [1, acc, [0, kacc]], rest);
             }
             return k$0;
            },
          k$1 = k$3(acc$0, k$0, rest$17),
          k$0 = k$1,
          acc$0 = 0,
          fmt$0 = fmt$1;
         continue;
        }
        var
         rest$18 = fmt$0[2],
         fmt$2 = _go_[1][1],
         k$4 =
           function(acc, k, rest){
            function k$0(kacc){
             return make_printf(k, [1, acc, [1, kacc]], rest);
            }
            return k$0;
           },
         k$2 = k$4(acc$0, k$0, rest$18),
         k$0 = k$2,
         acc$0 = 0,
         fmt$0 = fmt$2;
        continue;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _be_], 1);
       case 20:
        var rest$19 = fmt$0[3], new_acc = [8, acc$0, _bf_];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$1 = counter + 1 | 0;
            return make_invalid_arg(counter$1, k$0, acc$0, rest$22);
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$2 = counter + 1 | 0;
            return make_invalid_arg(counter$2, k$0, acc$0, rest$22);
           case 2:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bg_], 1);
           default:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$3 = counter + 1 | 0;
            return make_invalid_arg(counter$3, k$0, acc$0, rest$22);
         }
        switch(ign[0]){
          case 0:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$4 = counter + 1 | 0;
           return make_invalid_arg(counter$4, k$0, acc$0, rest$22);
          case 1:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$5 = counter + 1 | 0;
           return make_invalid_arg(counter$5, k$0, acc$0, rest$22);
          case 2:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$6 = counter + 1 | 0;
           return make_invalid_arg(counter$6, k$0, acc$0, rest$22);
          case 3:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$7 = counter + 1 | 0;
           return make_invalid_arg(counter$7, k$0, acc$0, rest$22);
          case 4:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$8 = counter + 1 | 0;
           return make_invalid_arg(counter$8, k$0, acc$0, rest$22);
          case 5:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$9 = counter + 1 | 0;
           return make_invalid_arg(counter$9, k$0, acc$0, rest$22);
          case 6:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$10 = counter + 1 | 0;
           return make_invalid_arg(counter$10, k$0, acc$0, rest$22);
          case 7:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$11 = counter + 1 | 0;
           return make_invalid_arg(counter$11, k$0, acc$0, rest$22);
          case 8:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$12 = counter + 1 | 0;
           return make_invalid_arg(counter$12, k$0, acc$0, rest$22);
          case 9:
           var fmtty$0 = ign[2];
           if(counter >= 50)
            return caml_trampoline_return
                    (make_from_fmtty$0, [0, k$0, acc$0, fmtty$0, rest$22]);
           var counter$15 = counter + 1 | 0;
           return make_from_fmtty$0(counter$15, k$0, acc$0, fmtty$0, rest$22);
          case 10:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$13 = counter + 1 | 0;
           return make_invalid_arg(counter$13, k$0, acc$0, rest$22);
          default:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$14 = counter + 1 | 0;
           return make_invalid_arg(counter$14, k$0, acc$0, rest$22);
        }
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _gp_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _gp_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _gp_);
     }
    }
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty(k, acc, concat_fmtty(ty, rest$8), fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _gn_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bh_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bi_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _gm_ = [8, acc, _bj_];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _gm_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _gm_, fmt);
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _gl_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _gl_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _gl_, rest);
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         output_string(o, _bk_);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match[1];
        output_acc(o, p$0);
        output_string(o, _bl_);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1]; output_acc(o, p$4); return caml_ml_flush(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_ml_output_char(o, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return add_string(b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bm_);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match[1];
        strput_acc(b, p$0);
        add_string(b, _bn_);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        return add_string(b, caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1], acc$0 = acc$3; continue;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        var pos = b[2];
        if(b[3] <= pos) resize(b, 1);
        caml_bytes_unsafe_set(b[1], pos, c);
        b[2] = pos + 1 | 0;
        return 0;
     }
    }
   }
   function fprintf(oc, fmt$0){
    var fmt = fmt$0[1], _gk_ = 0;
    return make_printf
            (function(acc){output_acc(oc, acc); return 0;}, _gk_, fmt);
   }
   function eprintf(fmt){return fprintf(outchan, fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = create$1(64);
     strput_acc(buf, acc);
     return caml_call1(k, contents(buf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var printers = [0, 0];
   function field(x, i){
    var f = x[1 + i];
    return 1 - (typeof f === "number" ? 1 : 0)
            ? caml_obj_tag
               (f)
              === 252
              ? caml_call1(sprintf(_bp_), f)
              : caml_obj_tag(f) === 253 ? string_of_float(f) : _bq_
            : caml_call1(sprintf(_br_), f);
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return _bs_;
    var _gi_ = other_fields(x, i + 1 | 0), _gj_ = field(x, i);
    return caml_call2(sprintf(_bt_), _gj_, _gi_);
   }
   function to_string(e){
    var param = printers[1];
    for(;;){
     if(param){
      var tl = param[2], hd = param[1], switch$0 = 0;
      try{var val = caml_call1(hd, e);}catch(_gh_){switch$0 = 1;}
      var switch$1 = 0;
      if(switch$0 || ! val)
       switch$1 = 1;
      else
       var s = val[1], match$3 = [0, s];
      if(switch$1){var param = tl; continue;}
     }
     else
      var match$3 = 0;
     if(match$3){var s$0 = match$3[1]; return s$0;}
     if(e === Out_of_memory) return _by_;
     if(e === Stack_overflow) return _bz_;
     if(e[1] === Match_failure){
      var
       match$0 = e[2],
       char$0 = match$0[3],
       line = match$0[2],
       file = match$0[1];
      return caml_call5
              (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _bA_);
     }
     if(e[1] === Assert_failure){
      var
       match$1 = e[2],
       char$1 = match$1[3],
       line$0 = match$1[2],
       file$0 = match$1[1];
      return caml_call5
              (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _bB_);
     }
     if(e[1] === Undefined_recursive_module){
      var
       match$2 = e[2],
       char$2 = match$2[3],
       line$1 = match$2[2],
       file$1 = match$2[1];
      return caml_call5
              (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _bC_);
     }
     if(0 !== caml_obj_tag(e)) return e[1];
     var constructor = e[1][1], match = e.length - 1;
     if(2 < match >>> 0)
      var
       _gd_ = other_fields(e, 2),
       _ge_ = field(e, 1),
       _gg_ = caml_call2(sprintf(_bu_), _ge_, _gd_);
     else
      switch(match){
        case 0:
         var _gg_ = _bv_; break;
        case 1:
         var _gg_ = _bw_; break;
        default:
         var _gf_ = field(e, 1), _gg_ = caml_call1(sprintf(_bx_), _gf_);
      }
     return symbol(constructor, _gg_);
    }
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var
     a = caml_convert_raw_backtrace(raw_backtrace),
     _gb_ = a.length - 1 - 1 | 0,
     _ga_ = 0;
    if(_gb_ >= 0){
     var pos = _ga_;
     for(;;){
      var
       slot = caml_check_bound(a, pos)[1 + pos],
       info$0 =
         function(pos){
          function info(is_raise){
           return is_raise ? 0 === pos ? _bD_ : _bE_ : 0 === pos ? _bF_ : _bG_;
          }
          return info;
         },
       info = info$0(pos);
      if(0 === slot[0])
       var
        _f4_ = slot[5],
        _f5_ = slot[4],
        _f6_ = slot[3],
        _f7_ = slot[6] ? _bH_ : _bJ_,
        _f8_ = slot[2],
        _f9_ = slot[7],
        _f__ = info(slot[1]),
        match =
          [0,
           caml_call7(sprintf(_bI_), _f__, _f9_, _f8_, _f7_, _f6_, _f5_, _f4_)];
      else if(slot[1])
       var match = 0;
      else
       var _f$_ = info(0), match = [0, caml_call1(sprintf(_bK_), _f$_)];
      if(match){var str = match[1]; caml_call1(fprintf(outchan, _bL_), str);}
      var _gc_ = pos + 1 | 0;
      if(_gb_ !== pos){var pos = _gc_; continue;}
      break;
     }
    }
    return 0;
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = printers[1],
      new_printers = [0, fn, old_printers],
      success = compare_and_set(printers, old_printers, new_printers),
      _f3_ = 1 - success;
     if(_f3_) continue;
     return _f3_;
    }
   }
   var errors = _bM_.slice(), empty_backtrace = [0];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use
          ? empty_backtrace
          : caml_get_exception_raw_backtrace(0);
      try{do_at_exit(0);}catch(_f2_){}
      try{
       var _fS_ = to_string(exn$0);
       caml_call1(eprintf(_bN_), _fS_);
       print_raw_backtrace(outchan, raw_backtrace);
       var status = caml_ml_debug_info_status(0);
       if(status < 0){
        var _fT_ = abs(status);
        prerr_endline(caml_check_bound(errors, _fT_)[1 + _fT_]);
       }
       var _fU_ = caml_ml_flush(outchan), _fY_ = _fU_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtrace(0),
        _fW_ = to_string(exn$0);
       caml_call1(eprintf(_bP_), _fW_);
       print_raw_backtrace(outchan, raw_backtrace);
       var _fX_ = to_string(exn);
       caml_call1(eprintf(_bQ_), _fX_);
       print_raw_backtrace(outchan, raw_backtrace$0);
       var _fY_ = caml_ml_flush(outchan);
      }
      var _fZ_ = _fY_;
     }
     catch(_f1_){
      var _fV_ = caml_wrap_exception(_f1_);
      if(_fV_ !== Out_of_memory) throw caml_maybe_attach_backtrace(_fV_, 0);
      var _fZ_ = prerr_endline(_bO_);
     }
     return _fZ_;
    }
    catch(_f0_){return 0;}
   }
   caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var String_tag = [248, _bR_, caml_fresh_oo_id(0)], zero = 0, unknown = -1;
   function pp_enqueue(state, token){
    state[13] = state[13] + token[3] | 0;
    return add(token, state[28]);
   }
   var pp_infinity = 1000000010;
   function pp_output_string(state, s){
    return caml_call3(state[17], s, 0, caml_ml_string_length(s));
   }
   function pp_output_newline(state){return caml_call1(state[19], 0);}
   function format_pp_text(state, size, text){
    state[9] = state[9] - size | 0;
    pp_output_string(state, text);
    state[11] = 0;
    return 0;
   }
   function format_string(state, s){
    var _fR_ = caml_string_notequal(s, cst$2);
    return _fR_ ? format_pp_text(state, caml_ml_string_length(s), s) : _fR_;
   }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
    format_string(state, before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     x = state[8],
     real_indent = x <= indent ? x : indent;
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    var n = state[10];
    caml_call1(state[21], n);
    return format_string(state, after);
   }
   function break_line(state, width){
    return break_new_line(state, _bS_, width);
   }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
    format_string(state, before);
    state[9] = state[9] - width | 0;
    caml_call1(state[20], width);
    return format_string(state, after);
   }
   function format_pp_token(state, size$0, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var match$3 = top_opt(state[3]);
        if(! match$3) return 0;
        var
         tabs = match$3[1][1],
         add_tab =
           function(n, ls){
            if(! ls) return [0, n, 0];
            var l = ls[2], x = ls[1];
            return caml_lessthan(n, x) ? [0, n, ls] : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return 0;
       case 1:
        pop_opt(state[2]); return 0;
       case 2:
        pop_opt(state[3]); return 0;
       case 3:
        var match$4 = top_opt(state[2]);
        if(! match$4) return pp_output_newline(state);
        var width$0 = match$4[1][2];
        return break_line(state, width$0);
       case 4:
        var _fP_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        if(! _fP_) return _fP_;
        var q = state[28], _fO_ = q[2];
        if(_fO_){
         var content = _fO_[1];
         if(_fO_[2]){
          var next = _fO_[2];
          q[1] = q[1] - 1 | 0;
          q[2] = next;
          var match$1 = [0, content];
         }
         else{clear$0(q); var match$1 = [0, content];}
        }
        else
         var match$1 = 0;
        if(! match$1) return 0;
        var match$2 = match$1[1], size = match$2[1], length = match$2[3];
        state[12] = state[12] - length | 0;
        state[9] = state[9] + size | 0;
        return 0;
       default:
        var match$5 = pop_opt(state[5]);
        if(! match$5) return 0;
        var tag_name = match$5[1], marker = caml_call1(state[25], tag_name);
        return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1]; return format_pp_text(state, size$0, s);
      case 1:
       var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
        match$6 = top_opt(state[2]);
       if(! match$6) return 0;
       var
        match$7 = match$6[1],
        width$1 = match$7[2],
        box_type$0 = match$7[1];
       switch(box_type$0){
         case 0:
          return break_same_line(state, fits);
         case 1:
          return break_new_line(state, breaks, width$1);
         case 2:
          return break_new_line(state, breaks, width$1);
         case 3:
          return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$1)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size$0 + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$1)
                    : ((state
                       [6]
                      - width$1
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$1)
                      : break_same_line(state, fits);
         default: return break_same_line(state, fits);
       }
      case 2:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$8 = top_opt(state[3]);
       if(! match$8) return 0;
       var tabs$0 = match$8[1][1], match$9 = tabs$0[1];
       if(match$9){
        var first = match$9[1], param$0 = tabs$0[1];
        for(;;){
         if(param$0){
          var tail = param$0[2], head = param$0[1];
          if(insertion_point > head){var param$0 = tail; continue;}
          var _fQ_ = head;
         }
         else
          var _fQ_ = first;
         var tab = _fQ_;
         break;
        }
       }
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
       return 0 <= offset
               ? break_same_line(state, [0, _bU_, offset + n | 0, _bT_])
               : break_new_line
                 (state, [0, _bW_, tab + off$0 | 0, _bV_], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0){
        var match = top_opt(state[2]);
        if(match){
         var match$0 = match[1], width = match$0[2], box_type = match$0[1];
         if(state[9] < width && 3 >= box_type - 1 >>> 0)
          break_line(state, width);
        }
        else
         pp_output_newline(state);
       }
       var
        width$2 = state[9] - off$1 | 0,
        box_type$1 = 1 === ty ? 1 : state[9] < size$0 ? ty : 5;
       return push([0, box_type$1, width$2], state[2]);
      case 4:
       var tbox = param[1]; return push(tbox, state[3]);
      default:
       var
        tag_name$0 = param[1],
        marker$0 = caml_call1(state[24], tag_name$0);
       pp_output_string(state, marker$0);
       return push(tag_name$0, state[5]);
    }
   }
   function advance_left(state){
    for(;;){
     var q = state[28], match = q[2];
     if(match)
      var content = match[1], match$0 = [0, content];
     else
      var match$0 = 0;
     if(! match$0) return 0;
     var
      match$1 = match$0[1],
      size = match$1[1],
      length = match$1[3],
      token = match$1[2],
      pending_count = state[13] - state[12] | 0,
      _fM_ = 0 <= size ? 1 : 0,
      _fN_ = _fM_ || (state[9] <= pending_count ? 1 : 0);
     if(! _fN_) return _fN_;
     take(state[28]);
     var size$0 = 0 <= size ? size : pp_infinity;
     format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
   }
   function enqueue_advance(state, tok){
    pp_enqueue(state, tok);
    return advance_left(state);
   }
   function enqueue_string_as(state, size, s){
    return enqueue_advance(state, [0, size, [0, s], size]);
   }
   function initialize_scan_stack(stack){
    clear(stack);
    var queue_elem = [0, unknown, _bX_, 0];
    return push([0, -1, queue_elem], stack);
   }
   function set_size(state, ty){
    var match = top_opt(state[1]);
    if(! match) return 0;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = queue_elem[1];
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _fI_ = queue_elem[2];
    if(typeof _fI_ !== "number")
     switch(_fI_[0]){
       case 3:
        var
         _fK_ = 1 - ty,
         _fL_ =
           _fK_
            ? (queue_elem[1] = state[13] + size | 0, pop_opt(state[1]), 0)
            : _fK_;
        return _fL_;
       case 1:
       case 2:
        var
         _fJ_ =
           ty
            ? (queue_elem[1] = state[13] + size | 0, pop_opt(state[1]), 0)
            : ty;
        return _fJ_;
     }
    return 0;
   }
   function scan_push(state, b, token){
    pp_enqueue(state, token);
    if(b) set_size(state, 1);
    var elem = [0, state[13], token];
    return push(elem, state[1]);
   }
   function pp_open_box_gen(state, indent, br_ty){
    state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var size = - state[13] | 0, elem = [0, size, [3, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
    var _fH_ = state[14] === state[15] ? 1 : 0;
    if(! _fH_) return _fH_;
    var s = state[16];
    return enqueue_string_as(state, caml_ml_string_length(s), s);
   }
   function pp_close_box(state, param){
    var _fF_ = 1 < state[14] ? 1 : 0;
    if(_fF_){
     if(state[14] < state[15]){
      pp_enqueue(state, [0, zero, 1, 0]);
      set_size(state, 1);
      set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _fG_ = 0;
    }
    else
     var _fG_ = _fF_;
    return _fG_;
   }
   function pp_close_tag(state, param){
    if(state[23]) pp_enqueue(state, [0, zero, 5, 0]);
    var _fD_ = state[22];
    if(_fD_){
     var match = pop_opt(state[4]);
     if(match){
      var tag_name = match[1];
      return caml_call1(state[27], tag_name);
     }
     var _fE_ = 0;
    }
    else
     var _fE_ = _fD_;
    return _fE_;
   }
   function pp_flush_queue(state, b){
    var s = state[4], param = s[1];
    for(;;){
     if(param){
      var l = param[2];
      pp_close_tag(state, 0);
      var param = l;
      continue;
     }
     for(;;){
      if(1 < state[14]){pp_close_box(state, 0); continue;}
      state[13] = pp_infinity;
      advance_left(state);
      if(b) pp_output_newline(state);
      state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state, 0, 3);
     }
    }
   }
   function pp_print_as_size(state, size, s){
    var _fC_ = state[14] < state[15] ? 1 : 0;
    return _fC_ ? enqueue_string_as(state, size, s) : _fC_;
   }
   function pp_print_as(state, isize, s){
    return pp_print_as_size(state, isize, s);
   }
   function pp_print_string(state, s){
    return pp_print_as(state, caml_ml_string_length(s), s);
   }
   function pp_print_char(state, c){
    return pp_print_as(state, 1, make$0(1, c));
   }
   function pp_print_flush(state, param){
    pp_flush_queue(state, 0);
    return caml_call1(state[18], 0);
   }
   var blank_line = make$0(80, 32);
   function display_blanks(state, n){
    var n$0 = n;
    for(;;){
     var _fB_ = 0 < n$0 ? 1 : 0;
     if(! _fB_) return _fB_;
     if(80 >= n$0) return caml_call3(state[17], blank_line, 0, n$0);
     caml_call3(state[17], blank_line, 0, 80);
     var n$1 = n$0 - 80 | 0, n$0 = n$1;
    }
   }
   function default_pp_mark_open_tag(param){
    if(param[1] !== String_tag) return _b5_;
    var s = param[2];
    return symbol(_b4_, symbol(s, _b3_));
   }
   function default_pp_mark_close_tag(param){
    if(param[1] !== String_tag) return _b8_;
    var s = param[2];
    return symbol(_b7_, symbol(s, _b6_));
   }
   function default_pp_print_open_tag(_fA_){return 0;}
   function default_pp_print_close_tag(_fz_){return 0;}
   function make_formatter(output, flush){
    function j(_fy_){return 0;}
    function i(_fx_){return 0;}
    function h(_fw_){return 0;}
    var pp_queue = create$0(0), sys_tok = [0, unknown, _b9_, 0];
    add(sys_tok, pp_queue);
    var scan_stack = create(0);
    initialize_scan_stack(scan_stack);
    push([0, 1, sys_tok], scan_stack);
    var
     _fq_ = create(0),
     _fr_ = create(0),
     _fs_ = create(0),
     state =
       [0,
        scan_stack,
        create(0),
        _fs_,
        _fr_,
        _fq_,
        78,
        10,
        68,
        78,
        0,
        1,
        1,
        1,
        1,
        max_int,
        _b__,
        output,
        flush,
        h,
        i,
        j,
        0,
        0,
        default_pp_mark_open_tag,
        default_pp_mark_close_tag,
        default_pp_print_open_tag,
        default_pp_print_close_tag,
        pp_queue];
    state[19] = function(_fv_){return caml_call3(state[17], _b2_, 0, 1);};
    state[20] = function(_fu_){return display_blanks(state, _fu_);};
    state[21] = function(_ft_){return display_blanks(state, _ft_);};
    return state;
   }
   function formatter_of_out_channel(oc){
    function _fp_(param){return caml_ml_flush(oc);}
    return make_formatter
            (function(s, ofs, len){
              if
               (0 <= ofs
                && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
               return caml_ml_output(oc, s, ofs, len);
              return invalid_arg(_d_);
             },
             _fp_);
   }
   function formatter_of_buffer(b){
    function _fk_(_fo_){return 0;}
    return make_formatter
            (function(s, offset, len){
              var _fl_ = offset < 0 ? 1 : 0;
              if(_fl_)
               var _fm_ = _fl_;
              else
               var
                _fn_ = len < 0 ? 1 : 0,
                _fm_ =
                  _fn_
                  || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
              if(_fm_) invalid_arg(_w_);
              var new_position = b[2] + len | 0;
              if(b[3] < new_position) resize(b, len);
              caml_blit_string(s, offset, b[1], b[2], len);
              b[2] = new_position;
              return 0;
             },
             _fk_);
   }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){return create$1(pp_buffer_size);}
   var
    stdbuf = pp_make_buffer(0),
    std_formatter = formatter_of_out_channel(stdout),
    err_formatter = formatter_of_out_channel(outchan);
   formatter_of_buffer(stdbuf);
   function compute_tag(output, tag_acc){
    var buf = create$1(16), ppf = formatter_of_buffer(buf);
    caml_call2(output, ppf, tag_acc);
    pp_print_flush(ppf, 0);
    var len = buf[2];
    if(2 > len) return contents(buf);
    var len$0 = len - 2 | 0, ofs = 1;
    if(0 <= len$0 && (buf[2] - len$0 | 0) >= 1)
     return sub_string(buf[1], ofs, len$0);
    return invalid_arg(_s_);
   }
   function strput_acc$0(state, acc){
    var switch$0 = 0;
    if(typeof acc === "number") return 0;
    switch(acc[0]){
      case 0:
       var fmting_lit = acc[2], p = acc[1];
       strput_acc$0(state, p);
       if(typeof fmting_lit === "number")
        switch(fmting_lit){
          case 0:
           return pp_close_box(state, 0);
          case 1:
           return pp_close_tag(state, 0);
          case 2:
           return pp_print_flush(state, 0);
          case 3:
           var _e$_ = state[14] < state[15] ? 1 : 0;
           return _e$_ ? enqueue_advance(state, [0, zero, 3, 0]) : _e$_;
          case 4:
           pp_flush_queue(state, 1); return caml_call1(state[18], 0);
          case 5:
           return pp_print_char(state, 64);
          default: return pp_print_char(state, 37);
        }
       switch(fmting_lit[0]){
         case 0:
          var
           offset = fmting_lit[3],
           width$0 = fmting_lit[2],
           breaks = [0, _bZ_, offset, _bY_],
           fits = [0, _b1_, width$0, _b0_],
           after = fits[3],
           width = fits[2],
           before = fits[1],
           _fa_ = state[14] < state[15] ? 1 : 0;
          if(! _fa_) return _fa_;
          var
           size = - state[13] | 0,
           token$0 = [1, fits, breaks],
           length =
             (caml_ml_string_length(before) + width | 0)
             + caml_ml_string_length(after)
             | 0,
           elem = [0, size, token$0, length];
          return scan_push(state, 1, elem);
         case 1:
          return 0;
         default:
          var c = fmting_lit[1];
          pp_print_char(state, 64);
          return pp_print_char(state, c);
       }
      case 1:
       var match$0 = acc[2], p$0 = acc[1];
       if(0 === match$0[0]){
        var acc$0 = match$0[1];
        strput_acc$0(state, p$0);
        var tag_name = [0, String_tag, compute_tag(strput_acc$0, acc$0)];
        if(state[22]){
         push(tag_name, state[4]);
         caml_call1(state[26], tag_name);
        }
        var _e__ = state[23];
        if(! _e__) return _e__;
        var token = [5, tag_name];
        return pp_enqueue(state, [0, zero, token, 0]);
       }
       var acc$1 = match$0[1];
       strput_acc$0(state, p$0);
       var str = compute_tag(strput_acc$0, acc$1);
       if(caml_string_equal(str, cst$2))
        var match$1 = _bo_;
       else{
        var
         len = caml_ml_string_length(str),
         invalid_box =
           function(param){
            var fmt = param$0[1], buf = create$1(256);
            function k(acc){
             strput_acc(buf, acc);
             return failwith(contents(buf));
            }
            return caml_call1(make_printf(k, 0, fmt), str);
           },
         parse_spaces =
           function(i){
            var i$0 = i;
            for(;;){
             if(i$0 === len) return i$0;
             var match = caml_string_get(str, i$0);
             if(9 !== match && 32 !== match) return i$0;
             var i$1 = i$0 + 1 | 0, i$0 = i$1;
            }
           },
         wstart = parse_spaces(0),
         wend = wstart;
        for(;;){
         if(wend !== len && 25 >= caml_string_get(str, wend) - 97 >>> 0){var j = wend + 1 | 0, wend = j; continue;}
         var
          box_name = sub$0(str, wstart, wend - wstart | 0),
          nstart = parse_spaces(wend),
          nend = nstart;
         for(;;){
          if(nend !== len){
           var match = caml_string_get(str, nend), switch$1 = 0;
           if(48 <= match){
            if(58 > match) switch$1 = 1;
           }
           else if(45 === match) switch$1 = 1;
           if(switch$1){var j$0 = nend + 1 | 0, nend = j$0; continue;}
          }
          if(nstart === nend)
           var indent = 0;
          else
           try{
            var
             _e9_ = caml_int_of_string(sub$0(str, nstart, nend - nstart | 0)),
             indent = _e9_;
           }
           catch(_fj_){
            var _e8_ = caml_wrap_exception(_fj_);
            if(_e8_[1] !== Failure)
             throw caml_maybe_attach_backtrace(_e8_, 0);
            var indent = invalid_box(0);
           }
          var exp_end = parse_spaces(nend);
          if(exp_end !== len) invalid_box(0);
          var switch$2 = 0;
          if
           (caml_string_notequal(box_name, cst$2)
            && caml_string_notequal(box_name, "b"))
           var
            box_type =
              caml_string_notequal(box_name, "h")
               ? caml_string_notequal
                  (box_name, "hov")
                 ? caml_string_notequal
                    (box_name, "hv")
                   ? caml_string_notequal(box_name, "v") ? invalid_box(0) : 1
                   : 2
                 : 3
               : 0;
          else
           switch$2 = 1;
          if(switch$2) var box_type = 4;
          var match$1 = [0, indent, box_type];
          break;
         }
         break;
        }
       }
       var bty = match$1[2], indent$0 = match$1[1];
       return pp_open_box_gen(state, indent$0, bty);
      case 2:
       var _fb_ = acc[1], switch$3 = 0;
       if(typeof _fb_ === "number" || ! (0 === _fb_[0]))
        switch$3 = 1;
       else{
        var _fc_ = _fb_[2], switch$4 = 0;
        if(typeof _fc_ === "number" || ! (1 === _fc_[0]))
         switch$4 = 1;
        else
         var s$0 = acc[2], size$0 = _fc_[2], p$2 = _fb_[1];
        if(switch$4) switch$3 = 1;
       }
       if(switch$3){var s = acc[2], p$1 = _fb_; switch$0 = 2;}
       break;
      case 3:
       var _fd_ = acc[1], switch$5 = 0;
       if(typeof _fd_ === "number" || ! (0 === _fd_[0]))
        switch$5 = 1;
       else{
        var _fe_ = _fd_[2], switch$6 = 0;
        if(typeof _fe_ === "number" || ! (1 === _fe_[0]))
         switch$6 = 1;
        else{var c$1 = acc[2], size$1 = _fe_[2], p$4 = _fd_[1]; switch$0 = 1;}
        if(switch$6) switch$5 = 1;
       }
       if(switch$5){var c$0 = acc[2], p$3 = _fd_; switch$0 = 3;}
       break;
      case 4:
       var _ff_ = acc[1], switch$7 = 0;
       if(typeof _ff_ === "number" || ! (0 === _ff_[0]))
        switch$7 = 1;
       else{
        var _fg_ = _ff_[2], switch$8 = 0;
        if(typeof _fg_ === "number" || ! (1 === _fg_[0]))
         switch$8 = 1;
        else
         var s$0 = acc[2], size$0 = _fg_[2], p$2 = _ff_[1];
        if(switch$8) switch$7 = 1;
       }
       if(switch$7){var s = acc[2], p$1 = _ff_; switch$0 = 2;}
       break;
      case 5:
       var _fh_ = acc[1], switch$9 = 0;
       if(typeof _fh_ === "number" || ! (0 === _fh_[0]))
        switch$9 = 1;
       else{
        var _fi_ = _fh_[2], switch$10 = 0;
        if(typeof _fi_ === "number" || ! (1 === _fi_[0]))
         switch$10 = 1;
        else{var c$1 = acc[2], size$1 = _fi_[2], p$4 = _fh_[1]; switch$0 = 1;}
        if(switch$10) switch$9 = 1;
       }
       if(switch$9){var c$0 = acc[2], p$3 = _fh_; switch$0 = 3;}
       break;
      case 6:
       var p$5 = acc[1];
       if(typeof p$5 !== "number" && 0 === p$5[0]){
        var match$2 = p$5[2];
        if(typeof match$2 !== "number" && 1 === match$2[0]){
         var f$0 = acc[2], size$2 = match$2[2], p$6 = p$5[1];
         strput_acc$0(state, p$6);
         return pp_print_as_size(state, size$2, caml_call1(f$0, 0));
        }
       }
       var f = acc[2];
       strput_acc$0(state, p$5);
       return pp_print_string(state, caml_call1(f, 0));
      case 7:
       var p$7 = acc[1];
       strput_acc$0(state, p$7);
       return pp_print_flush(state, 0);
      default:
       var msg = acc[2], p$8 = acc[1];
       strput_acc$0(state, p$8);
       return invalid_arg(msg);
    }
    switch(switch$0){
      case 0:
       strput_acc$0(state, p$2); return pp_print_as_size(state, size$0, s$0);
      case 1:
       strput_acc$0(state, p$4);
       return pp_print_as_size(state, size$1, make$0(1, c$1));
      case 2:
       strput_acc$0(state, p$1); return pp_print_string(state, s);
      default: strput_acc$0(state, p$3); return pp_print_char(state, c$0);
    }
   }
   function sprintf$0(fmt$0){
    var
     fmt = fmt$0[1],
     buf = pp_make_buffer(0),
     ppf = formatter_of_buffer(buf);
    function k(acc){
     strput_acc$0(ppf, acc);
     pp_flush_queue(ppf, 0);
     var s = contents(buf);
     buf[2] = 0;
     buf[1] = buf[4];
     buf[3] = caml_ml_bytes_length(buf[1]);
     return s;
    }
    return make_printf(k, 0, fmt);
   }
   for(;;){
    var
     f_yet_to_run = [0, 1],
     old_exit = exit_function[1],
     new_exit$0 =
       function(f_yet_to_run, old_exit){
        function new_exit(param){
         if(compare_and_set(f_yet_to_run, 1, 0)){
          pp_print_flush(std_formatter, 0);
          pp_print_flush(err_formatter, 0);
         }
         return old_exit(0);
        }
        return new_exit;
       },
     new_exit = new_exit$0(f_yet_to_run, old_exit),
     success = compare_and_set(exit_function, old_exit, new_exit);
    if(1 - success) continue;
    var
     Error = [248, _b$_, caml_fresh_oo_id(0)],
     exn = [0, Error, [0]],
     slot = caml_obj_tag(exn) === 248 ? exn : exn[1];
    caml_register_named_value("jsError", slot);
    (function(exn){throw exn;});
    var
     global = globalThis,
     no_handler = null,
     undefined$0 = undefined,
     test = function(x){return 1 - (x == no_handler ? 1 : 0);},
     iter =
       function(x, f){
        var _e7_ = 1 - (x == no_handler ? 1 : 0);
        return _e7_ ? caml_call1(f, x) : _e7_;
       },
     iter$0 =
       function(x, f){
        var _e6_ = x !== undefined$0 ? 1 : 0;
        return _e6_ ? caml_call1(f, x) : _e6_;
       },
     true$0 = true,
     false$0 = false;
    global.String;
    global.RegExp;
    global.Object;
    var array_constructor = global.Array;
    global.Date;
    global.Math;
    global.Error;
    global.JSON;
    register_printer
     (function(param){
       if(param[1] !== Error) return 0;
       var e = param[2];
       return [0, caml_string_of_jsstring(e.toString())];
      });
    register_printer
     (function(e){
       return e instanceof array_constructor
               ? 0
               : [0, caml_string_of_jsstring(e.toString())];
      });
    var
     handler =
       function(f){
        return caml_js_wrap_callback_unsafe
                (function(e){
                  if(test(e)){
                   var res = caml_call1(f, e);
                   if(1 - (res | 0)) e.preventDefault();
                   return res;
                  }
                  var t18 = event, res$0 = caml_call1(f, t18);
                  if(1 - (res$0 | 0)) t18.returnValue = res$0;
                  return res$0;
                 });
       },
     addEventListener =
       function(t28, typ, h, capt){
        var capture = [0, capt], passive = 0, once = 0;
        if(t28.addEventListener === undefined$0){
         var
          ev = "on".concat(typ),
          callback =
            function(e){
             var _e3_ = [0, h, e, [0]];
             return function(_e4_, _e5_){
              return caml_js_call(_e3_, _e4_, _e5_);};
            };
         t28.attachEvent(ev, callback);
         return function(param){return t28.detachEvent(ev, callback);};
        }
        var opts = {};
        function iter(t, f){
         if(! t) return 0;
         var b = t[1];
         return caml_call1(f, b);
        }
        iter(capture, function(t37){return opts.capture = t37;});
        iter(once, function(t39){return opts.once = t39;});
        iter(passive, function(t41){return opts.passive = t41;});
        t28.addEventListener(typ, h, opts);
        return function(param){return t28.removeEventListener(typ, h, opts);};
       },
     removeEventListener = function(id){return caml_call1(id, 0);},
     mouseup = "mouseup",
     mousemove = "mousemove",
     keydown = "keydown",
     touchstart = "touchstart",
     touchmove = "touchmove",
     touchend = "touchend",
     document = global.document,
     unsafeCreateElement =
       function(doc, name){
        return doc.createElement(caml_jsstring_of_string(name));
       },
     Canvas_not_available = [248, _cb_, caml_fresh_oo_id(0)],
     html_element = global.HTMLElement;
    html_element === undefined$0;
    var
     stopPropagation =
       function(t109){
        var x = t109.stopPropagation;
        return x === undefined$0
                ? t109.cancelBubble = true$0
                : t109.stopPropagation();
       },
     console$0 = caml_js_get_console(0),
     empty = 0,
     underlying =
       function(p){
        var match = p[1];
        switch(match[0]){
          case 0:
           return p;
          case 1:
           return p;
          case 2:
           return p;
          default:
           var p$0 = match[1], p$1 = underlying(p$0);
           if(1 - (p$1 === p$0 ? 1 : 0)) p[1] = [3, p$1];
           return p$1;
        }
       },
     set_promise_state = function(p, state){p[1] = state; return p;},
     current_storage = [0, empty],
     concat_regular_callbacks =
       function(l1, l2){
        return typeof l1 === "number"
                ? l2
                : typeof l2 === "number" ? l1 : [0, l1, l2];
       },
     clean_up_callback_cells =
       function(callbacks){
        if(typeof callbacks !== "number")
         switch(callbacks[0]){
           case 0:
            var
             l2 = callbacks[2],
             l1 = callbacks[1],
             l1$0 = clean_up_callback_cells(l1),
             l2$0 = clean_up_callback_cells(l2);
            return concat_regular_callbacks(l1$0, l2$0);
           case 2:
            if(! callbacks[1][1]) return 0; break;
         }
        return callbacks;
       },
     add_implicitly_removed_callbac =
       function(callbacks, f){
        var
         node$0 = [1, f],
         existing = callbacks[1],
         node = typeof existing === "number" ? node$0 : [0, node$0, existing];
        callbacks[1] = node;
        return 0;
       },
     _cd_ =
       function(exn){
        prerr_string(_ce_);
        prerr_string(to_string(exn));
        caml_ml_output_char(outchan, 10);
        print_raw_backtrace(outchan, caml_get_exception_raw_backtrace(0));
        caml_ml_flush(outchan);
        do_at_exit(0);
        return caml_sys_exit(2);
       },
     Canceled = [248, _cf_, caml_fresh_oo_id(0)],
     run_callbacks =
       function(callbacks, result){
        if(1 === result[0])
         var _e2_ = result[1] === Canceled ? 1 : 0, is_canceled = _e2_;
        else
         var is_canceled = 0;
        if(is_canceled){
         var
          fs = callbacks[2],
          iter_callback_list$2 =
            function(counter, fs, rest){
             var fs$0 = fs, rest$0 = rest;
             for(;;){
              if(typeof fs$0 === "number"){
               if(counter >= 50)
                return caml_trampoline_return(iter_list$0, [0, rest$0]);
               var counter$0 = counter + 1 | 0;
               return iter_list$0(counter$0, rest$0);
              }
              switch(fs$0[0]){
                case 0:
                 var
                  fs$1 = fs$0[2],
                  fs$2 = fs$0[1],
                  rest$1 = [0, fs$1, rest$0],
                  fs$0 = fs$2,
                  rest$0 = rest$1;
                 continue;
                case 1:
                 var f = fs$0[2], storage = fs$0[1];
                 current_storage[1] = storage;
                 var v = 0;
                 try{caml_call1(f, v);}
                 catch(exn$0){
                  var exn = caml_wrap_exception(exn$0);
                  if(! 1) throw caml_maybe_attach_backtrace(exn, 0);
                  _cd_(exn);
                 }
                 if(counter >= 50)
                  return caml_trampoline_return(iter_list$0, [0, rest$0]);
                 var counter$2 = counter + 1 | 0;
                 return iter_list$0(counter$2, rest$0);
                default:
                 var node = fs$0[1];
                 if(node[4]){
                  node[4] = 0;
                  node[1][2] = node[2];
                  node[2][1] = node[1];
                 }
                 if(counter >= 50)
                  return caml_trampoline_return(iter_list$0, [0, rest$0]);
                 var counter$1 = counter + 1 | 0;
                 return iter_list$0(counter$1, rest$0);
              }
             }
            },
          iter_list$0 =
            function(counter, rest){
             if(! rest) return 0;
             var rest$0 = rest[2], fs = rest[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (iter_callback_list$2, [0, fs, rest$0]);
             var counter$0 = counter + 1 | 0;
             return iter_callback_list$2(counter$0, fs, rest$0);
            },
          iter_callback_list =
            function(fs, rest){
             return caml_trampoline(iter_callback_list$2(0, fs, rest));
            };
         iter_callback_list(fs, 0);
        }
        var fs$0 = callbacks[1];
        function iter_callback_list$1(counter, fs, rest){
         var fs$0 = fs, rest$0 = rest;
         for(;;){
          if(typeof fs$0 === "number"){
           if(counter >= 50)
            return caml_trampoline_return(iter_list, [0, rest$0]);
           var counter$0 = counter + 1 | 0;
           return iter_list(counter$0, rest$0);
          }
          switch(fs$0[0]){
            case 0:
             var
              fs$1 = fs$0[2],
              fs$2 = fs$0[1],
              rest$1 = [0, fs$1, rest$0],
              fs$0 = fs$2,
              rest$0 = rest$1;
             continue;
            case 1:
             var f = fs$0[1];
             caml_call1(f, result);
             if(counter >= 50)
              return caml_trampoline_return(iter_list, [0, rest$0]);
             var counter$1 = counter + 1 | 0;
             return iter_list(counter$1, rest$0);
            default:
             var match = fs$0[1][1];
             if(match){
              var f$0 = match[1];
              caml_call1(f$0, result);
              if(counter >= 50)
               return caml_trampoline_return(iter_list, [0, rest$0]);
              var counter$2 = counter + 1 | 0;
              return iter_list(counter$2, rest$0);
             }
             if(counter >= 50)
              return caml_trampoline_return(iter_list, [0, rest$0]);
             var counter$3 = counter + 1 | 0;
             return iter_list(counter$3, rest$0);
          }
         }
        }
        function iter_list(counter, rest){
         if(! rest) return 0;
         var rest$0 = rest[2], fs = rest[1];
         if(counter >= 50)
          return caml_trampoline_return(iter_callback_list$1, [0, fs, rest$0]);
         var counter$0 = counter + 1 | 0;
         return iter_callback_list$1(counter$0, fs, rest$0);
        }
        function iter_callback_list$0(fs, rest){
         return caml_trampoline(iter_callback_list$1(0, fs, rest));
        }
        return iter_callback_list$0(fs$0, 0);
       },
     current_callback_nesting_depth = [0, 0],
     deferred_callbacks = create$0(0),
     default_maximum_callback_nesti = 42,
     run_in_resolution_loop =
       function(f){
        current_callback_nesting_depth[1] =
         current_callback_nesting_depth[1] + 1 | 0;
        var
         storage_snapshot = current_storage[1],
         result$0 = caml_call1(f, 0);
        if(1 === current_callback_nesting_depth[1])
         for(;;){
          if(! is_empty(deferred_callbacks)){
           var
            match = take(deferred_callbacks),
            result = match[2],
            callbacks = match[1];
           run_callbacks(callbacks, result);
           continue;
          }
          break;
         }
        current_callback_nesting_depth[1] =
         current_callback_nesting_depth[1] - 1 | 0;
        current_storage[1] = storage_snapshot;
        return result$0;
       },
     resolve =
       function
       (allow_deferring$0, maximum_callback_nesting_depth$0, p, result){
        var callbacks = p[1][1], p$0 = set_promise_state(p, result);
        if(allow_deferring$0)
         var sth = allow_deferring$0[1], allow_deferring = sth;
        else
         var allow_deferring = 1;
        if(maximum_callback_nesting_depth$0)
         var
          sth$0 = maximum_callback_nesting_depth$0[1],
          maximum_callback_nesting_depth = sth$0;
        else
         var maximum_callback_nesting_depth = default_maximum_callback_nesti;
        var
         should_defer =
           allow_deferring
            ? maximum_callback_nesting_depth
              <= current_callback_nesting_depth[1]
              ? 1
              : 0
            : allow_deferring;
        if(should_defer)
         add([0, callbacks, result], deferred_callbacks);
        else
         run_in_resolution_loop
          (function(param){return run_callbacks(callbacks, result);});
        return p$0;
       },
     return$0 = function(v){return [0, [0, v]];},
     new_pending =
       function(how_to_cancel){
        var state = [2, [0, 0, 0, how_to_cancel, 0]];
        return [0, state];
       },
     symbol_bind =
       function(p, f){
        var p$0 = underlying(p);
        function create_result_promise_and_call(param){
         var p = new_pending([0, p$0]), saved_storage = current_storage[1];
         function callback(p_result){
          if(1 === p_result[0]){
           var p$1 = underlying(p);
           resolve(_cl_, 0, p$1, p_result);
           return 0;
          }
          var v = p_result[1];
          current_storage[1] = saved_storage;
          try{var _e1_ = caml_call1(f, v), user_provided_promise = _e1_;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(! 1) throw caml_maybe_attach_backtrace(exn, 0);
           var user_provided_promise = [0, [1, exn]];
          }
          var
           outer_promise = underlying(p),
           p$0 = underlying(user_provided_promise);
          if(p$0 !== outer_promise){
           var match = p$0[1];
           switch(match[0]){
             case 1:
              resolve(_ck_, 0, outer_promise, p$0[1]); break;
             case 2:
              var
               p_callbacks = match[1],
               outer_callbacks = outer_promise[1][1],
               regular_callbacks =
                 concat_regular_callbacks(outer_callbacks[1], p_callbacks[1]),
               cleanups_deferred = outer_callbacks[4] + p_callbacks[4] | 0;
              if(42 < cleanups_deferred)
               var
                cleanups_deferred$0 = 0,
                regular_callbacks$0 =
                  clean_up_callback_cells(regular_callbacks);
              else
               var
                cleanups_deferred$0 = cleanups_deferred,
                regular_callbacks$0 = regular_callbacks;
              var
               l2 = p_callbacks[2],
               l1 = outer_callbacks[2],
               cancel_callbacks =
                 typeof l1 === "number"
                  ? l2
                  : typeof l2 === "number" ? l1 : [0, l1, l2];
              outer_callbacks[1] = regular_callbacks$0;
              outer_callbacks[2] = cancel_callbacks;
              outer_callbacks[4] = cleanups_deferred$0;
              outer_callbacks[3] = p_callbacks[3];
              set_promise_state(p$0, [3, outer_promise]);
              break;
             default: resolve(_cj_, 0, outer_promise, p$0[1]);
           }
          }
          return 0;
         }
         return [0, p, callback];
        }
        var result = p$0[1];
        switch(result[0]){
          case 1:
           return [0, result];
          case 2:
           var
            p_callbacks = result[1],
            match$0 = create_result_promise_and_call(0),
            callback = match$0[2],
            p$1 = match$0[1];
           add_implicitly_removed_callbac(p_callbacks, callback);
           return p$1;
          default:
           var
            v = result[1],
            f$0 = function(param){return caml_call1(f, v);},
            run_immediately_and_ensure_tai = opt$0[1];
           if(run_immediately_and_ensure_tai) return f$0(0);
           var should_defer = 42 <= current_callback_nesting_depth[1] ? 1 : 0;
           if(! should_defer)
            return run_in_resolution_loop(function(param){return f$0(0);});
           var
            match = create_result_promise_and_call(0),
            deferred_callback = match[2],
            immediate_result = match[1],
            deferred_result = p$0[1],
            deferred_record = [0, [1, deferred_callback], 0, 0, 0];
           add([0, deferred_record, deferred_result], deferred_callbacks);
           return immediate_result;
        }
       },
     seq = [];
    caml_update_dummy(seq, [0, seq, seq]);
    var
     levels =
       [0,
        _dk_.slice(),
        [0,
         _dj_.slice(),
         [0,
          _di_.slice(),
          [0,
           _dh_.slice(),
           [0,
            _dg_.slice(),
            [0,
             _df_.slice(),
             [0,
              _de_.slice(),
              [0,
               _dd_.slice(),
               [0,
                _dc_.slice(),
                [0,
                 _db_.slice(),
                 [0,
                  _da_.slice(),
                  [0,
                   _c$_.slice(),
                   [0,
                    _c__.slice(),
                    [0,
                     _c9_.slice(),
                     [0,
                      _c8_.slice(),
                      [0,
                       _c7_.slice(),
                       [0,
                        _c6_.slice(),
                        [0,
                         _c5_.slice(),
                         [0,
                          _c4_.slice(),
                          [0,
                           _c3_.slice(),
                           [0,
                            _c2_.slice(),
                            [0,
                             _c1_.slice(),
                             [0,
                              _c0_.slice(),
                              [0,
                               _cZ_.slice(),
                               [0,
                                _cY_.slice(),
                                [0,
                                 _cX_.slice(),
                                 [0,
                                  _cW_.slice(),
                                  [0,
                                   _cV_.slice(),
                                   [0,
                                    _cU_.slice(),
                                    [0,
                                     _cT_.slice(),
                                     [0,
                                      _cS_.slice(),
                                      [0,
                                       _cR_.slice(),
                                       [0,
                                        _cQ_.slice(),
                                        [0,
                                         _cP_.slice(),
                                         [0,
                                          _cO_.slice(),
                                          [0,
                                           _cN_.slice(),
                                           [0,
                                            _cM_.slice(),
                                            [0,
                                             _cL_.slice(),
                                             [0,
                                              _cK_.slice(),
                                              [0,
                                               _cJ_.slice(),
                                               [0,
                                                _cI_.slice(),
                                                [0,
                                                 _cH_.slice(),
                                                 [0,
                                                  _cG_.slice(),
                                                  [0,
                                                   _cF_.slice(),
                                                   [0,
                                                    _cE_.slice(),
                                                    [0,
                                                     _cD_.slice(),
                                                     [0,
                                                      _cC_.slice(),
                                                      [0,
                                                       _cB_.slice(),
                                                       [0,
                                                        _cA_.slice(),
                                                        [0,
                                                         _cz_.slice(),
                                                         [0,
                                                          _cy_.slice(),
                                                          [0,
                                                           _cx_.slice(),
                                                           [0,
                                                            _cw_.slice(),
                                                            [0,
                                                             _cv_.slice(),
                                                             [0,
                                                              _cu_.slice(),
                                                              [0,
                                                               _ct_.slice(),
                                                               [0,
                                                                _cs_.slice(),
                                                                [0,
                                                                 _cr_.slice(),
                                                                 [0,
                                                                  _cq_.slice(),
                                                                  [0,
                                                                   _cp_.slice(),
                                                                   [0, _co_.slice(), [0, _cn_.slice(), [0, _cm_.slice(), 0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
     dragging = [0, 0],
     touching = [0, 0],
     touched_point = create$0(0),
     dx0 = [0, 0.],
     dy0 = [0, 0.],
     dx1 = [0, 0.],
     dy1 = [0, 0.],
     byte_to_booleans =
       function(b){
        var ones = caml_make_vect(8, 1);
        function f(i, b){return b << (7 - i | 0);}
        var l = ones.length - 1;
        if(0 === l)
         var shifted = [0];
        else{
         var r = caml_make_vect(l, f(0, ones[1])), _eZ_ = l - 1 | 0, _eY_ = 1;
         if(_eZ_ >= 1){
          var i = _eY_;
          for(;;){
           r[1 + i] = f(i, ones[1 + i]);
           var _e0_ = i + 1 | 0;
           if(_eZ_ !== i){var i = _e0_; continue;}
           break;
          }
         }
         var shifted = r;
        }
        return map(function(elt){return 0 < (elt & b) ? 1 : 0;}, shifted);
       },
     decompress_level =
       function(lvl){
        if(0 <= lvl){
         var l = levels, n = lvl;
         for(;;){
          if(l){
           var l$0 = l[2], a = l[1];
           if(0 !== n){var n$0 = n - 1 | 0, l = l$0, n = n$0; continue;}
           var level_data = a;
          }
          else
           var level_data = failwith(_k_);
          break;
         }
        }
        else
         var level_data = invalid_arg(_l_);
        var
         length = level_data.length - 1,
         width = caml_check_bound(level_data, 0)[1],
         height = caml_check_bound(level_data, 1)[2],
         _eF_ = length - 2 | 0,
         player_x = caml_check_bound(level_data, _eF_)[1 + _eF_],
         _eG_ = length - 1 | 0,
         player_y = caml_check_bound(level_data, _eG_)[1 + _eG_],
         len = length - 4 | 0,
         switch$0 = 0;
        if(0 <= len && (level_data.length - 1 - len | 0) >= 2){
         var _eH_ = caml_array_sub(level_data, 2, len);
         switch$0 = 1;
        }
        if(! switch$0) var _eH_ = invalid_arg(_p_);
        var
         temp = map(byte_to_booleans, _eH_),
         i$1 = temp.length - 1 - 1 | 0,
         i = i$1,
         res = 0;
        for(;;){
         if(0 <= i){
          var
           res$0 = [0, temp[1 + i], res],
           i$0 = i - 1 | 0,
           i = i$0,
           res = res$0;
          continue;
         }
         var
          bits = caml_array_concat(res),
          index = [0, 0],
          i$2 = [0, 0],
          counter = [0, 0],
          tile = [0, 0],
          grid1d = caml_make_vect(caml_mul(width, height), 0);
         for(;;){
          if(index[1] < caml_mul(width, height)){
           var _eI_ = i$2[1];
           if(caml_check_bound(bits, _eI_)[1 + _eI_]){
            counter[1] = 2;
            var _eJ_ = i$2[1] + 1 | 0;
            if(caml_check_bound(bits, _eJ_)[1 + _eJ_])
             counter[1] = counter[1] + 4 | 0;
            var _eK_ = i$2[1] + 2 | 0;
            if(caml_check_bound(bits, _eK_)[1 + _eK_])
             counter[1] = counter[1] + 2 | 0;
            var _eL_ = i$2[1] + 3 | 0;
            if(caml_check_bound(bits, _eL_)[1 + _eL_])
             counter[1] = counter[1] + 1 | 0;
            i$2[1] = i$2[1] + 4 | 0;
           }
           else{counter[1] = 1; i$2[1] = i$2[1] + 1 | 0;}
           var _eM_ = i$2[1];
           if(caml_check_bound(bits, _eM_)[1 + _eM_]){
            var _eN_ = i$2[1] + 1 | 0;
            if(caml_check_bound(bits, _eN_)[1 + _eN_]){
             var _eO_ = i$2[1] + 2 | 0;
             tile[1] = caml_check_bound(bits, _eO_)[1 + _eO_] ? 3 : 4;
             i$2[1] = i$2[1] + 3 | 0;
            }
            else{tile[1] = 2; i$2[1] = i$2[1] + 2 | 0;}
           }
           else{
            var _eP_ = i$2[1] + 1 | 0;
            tile[1] = caml_check_bound(bits, _eP_)[1 + _eP_] ? 1 : 0;
            i$2[1] = i$2[1] + 2 | 0;
           }
           var v = tile[1], len$0 = counter[1], ofs = index[1], switch$1 = 0;
           if
            (0 <= ofs && 0 <= len$0 && (grid1d.length - 1 - len$0 | 0) >= ofs){caml_array_fill(grid1d, ofs, len$0, v); switch$1 = 1;}
           if(! switch$1) invalid_arg(_q_);
           index[1] = index[1] + counter[1] | 0;
           continue;
          }
          var
           grid2d = caml_make_vect(width, [0]),
           _eD_ = width - 1 | 0,
           _eC_ = 0;
          if(_eD_ >= 0){
           var x = _eC_;
           for(;;){
            grid2d[1 + x] = caml_make_vect(height, 0);
            var _eE_ = x + 1 | 0;
            if(_eD_ !== x){var x = _eE_; continue;}
            break;
           }
          }
          var _eR_ = height - 1 | 0, _eQ_ = 0;
          if(_eR_ >= 0){
           var j = _eQ_;
           for(;;){
            var _eT_ = width - 1 | 0, _eS_ = 0;
            if(_eT_ >= 0){
             var i$3 = _eS_;
             for(;;){
              var
               _eV_ = caml_mul(j, width) + i$3 | 0,
               _eW_ = caml_check_bound(grid1d, _eV_)[1 + _eV_];
              caml_check_bound(caml_check_bound(grid2d, i$3)[1 + i$3], j)
               [1 + j]
              = _eW_;
              var _eX_ = i$3 + 1 | 0;
              if(_eT_ !== i$3){var i$3 = _eX_; continue;}
              break;
             }
            }
            var _eU_ = j + 1 | 0;
            if(_eR_ !== j){var j = _eU_; continue;}
            break;
           }
          }
          return [0, width, height, player_x, player_y, grid2d];
         }
        }
       },
     maxLevels = 0,
     param = levels;
    for(;;){
     if(param){
      var l = param[2], len = maxLevels + 1 | 0, maxLevels = len, param = l;
      continue;
     }
     var
      state = [0, 0, 0, 0, 0, 6, 1., 0., 0., 0, [0, [0, 0]], create$0(0), 0],
      draw_sprite =
        function(ct, sprites, x, y, tile){
         switch(tile){
           case 0:
            var tilenum = state[12] ? 88 : 89; break;
           case 1:
            var tilenum = 98; break;
           case 2:
            var tilenum = 6; break;
           case 3:
            var tilenum = 9; break;
           case 4:
            var tilenum = 102; break;
           case 5:
            var tilenum = 68; break;
           case 6:
            var tilenum = 65; break;
           case 7:
            var tilenum = 91; break;
           default: var tilenum = 94;
         }
         var tx = tilenum % 13 | 0, ty = tilenum / 13 | 0;
         return ct.drawImage
                 (sprites,
                  tx * 64.,
                  ty * 64.,
                  64.,
                  64.,
                  x * 64.,
                  y * 64.,
                  64.,
                  64.);
        },
      load_current_level =
        function(param){
         var lvl = decompress_level(state[9]);
         state[1] = lvl[1];
         state[2] = lvl[2];
         state[3] = lvl[3];
         state[4] = lvl[4];
         state[5] = 6;
         state[10] = lvl[5];
         return 0;
        },
      do_move =
        function(param){
         var
          dy = param[2],
          dx = param[1],
          _em_ = state[4] + dy | 0,
          _en_ = state[3] + dx | 0,
          moveOnce =
            caml_check_bound
              (caml_check_bound(state[10], _en_)[1 + _en_], _em_)
             [1 + _em_];
         if(mem(moveOnce, _dl_)){
          state[3] = state[3] + dx | 0;
          state[4] = state[4] + dy | 0;
          return 0;
         }
         var _eo_ = mem(moveOnce, _dm_);
         if(_eo_){
          var
           _ep_ = state[4] + (2 * dy | 0) | 0,
           _eq_ = state[3] + (2 * dx | 0) | 0,
           moveTwice =
             caml_check_bound
               (caml_check_bound(state[10], _eq_)[1 + _eq_], _ep_)
              [1 + _ep_],
           saveTile = 3 === moveOnce ? 4 : 0;
          if(0 === moveTwice){
           var _er_ = state[4] + dy | 0, _es_ = state[3] + dx | 0;
           caml_check_bound(caml_check_bound(state[10], _es_)[1 + _es_], _er_)
            [1 + _er_]
           = saveTile;
           var
            _et_ = state[4] + (2 * dy | 0) | 0,
            _eu_ = state[3] + (2 * dx | 0) | 0;
           caml_check_bound(caml_check_bound(state[10], _eu_)[1 + _eu_], _et_)
            [1 + _et_]
           = 2;
           state[3] = state[3] + dx | 0;
           state[4] = state[4] + dy | 0;
           return 0;
          }
          var _ev_ = 4 === moveTwice ? 1 : 0;
          if(_ev_){
           var _ew_ = state[4] + dy | 0, _ex_ = state[3] + dx | 0;
           caml_check_bound(caml_check_bound(state[10], _ex_)[1 + _ex_], _ew_)
            [1 + _ew_]
           = saveTile;
           var
            _ey_ = state[4] + (2 * dy | 0) | 0,
            _ez_ = state[3] + (2 * dx | 0) | 0;
           caml_check_bound(caml_check_bound(state[10], _ez_)[1 + _ez_], _ey_)
            [1 + _ey_]
           = 3;
           state[3] = state[3] + dx | 0;
           state[4] = state[4] + dy | 0;
           var _eA_ = 0;
          }
          else
           var _eA_ = _ev_;
          var _eB_ = _eA_;
         }
         else
          var _eB_ = _eo_;
         return _eB_;
        },
      need_redraw = [0, 0],
      redraw_funct = [0, function(param){return 0;}],
      perform_redraw =
        function(param){
         need_redraw[1] = 0;
         return caml_call1(redraw_funct[1], 0);
        },
      schedule_redraw =
        function(param){
         var
          _ej_ = 1 - need_redraw[1],
          _ek_ =
            _ej_
             ? (need_redraw
                [1]
               = 1,
               global.requestAnimationFrame
                (caml_js_wrap_callback
                  (function(param){
                    var _el_ = need_redraw[1];
                    return _el_ ? perform_redraw(0) : _el_;
                   })),
               0)
             : _ej_;
         return _ek_;
        },
      get_player_tile_from_dir =
        function(dir){
         switch(dir){
           case 0:
            return 5;
           case 1:
            return 6;
           case 2:
            return 7;
           default: return 8;
         }
        },
      handle_move =
        function(direction){
         switch(direction){
           case 0:
            do_move(_dn_); break;
           case 1:
            do_move(_do_); break;
           case 2:
            do_move(_dp_); break;
           default: do_move(_dq_);
         }
         add(direction, state[11]);
         state[5] = get_player_tile_from_dir(direction);
         schedule_redraw(0);
         var n_boxes = [0, 0], _ee_ = state[1] - 1 | 0, _ed_ = 0;
         if(_ee_ >= 0){
          var i = _ed_;
          for(;;){
           var _eg_ = state[2] - 1 | 0, _ef_ = 0;
           if(_eg_ >= 0){
            var j = _ef_;
            for(;;){
             if
              (2
               ===
                caml_check_bound(caml_check_bound(state[10], i)[1 + i], j)
                 [1 + j])
              n_boxes[1] = n_boxes[1] + 1 | 0;
             var _ei_ = j + 1 | 0;
             if(_eg_ !== j){var j = _ei_; continue;}
             break;
            }
           }
           var _eh_ = i + 1 | 0;
           if(_ee_ !== i){var i = _eh_; continue;}
           break;
          }
         }
         state[12] = 0 === n_boxes[1] ? 1 : 0;
         return 0;
        },
      disk =
        function(ct, x, y, r){
         ct.beginPath();
         ct.arc(x, y, r, 0., 6.283185307179586, false$0);
         return ct.fill();
        },
      start =
        function(param){
         console$0.log(symbol(_dx_, "" + maxLevels));
         function _dz_(tilesheet){
          var page = document.documentElement, t142 = page.style;
          t142.overflow = cst_hidden;
          var t145 = page.style;
          t145.height = cst_100;
          var t147 = document.body, t149 = t147.style;
          t149.overflow = cst_hidden;
          var t151 = document.body, t153 = t151.style;
          t153.margin = "0px";
          var t155 = document.body, t157 = t155.style;
          t157.height = cst_100;
          var
           t14 = page.clientWidth,
           t16 = page.clientHeight,
           element = unsafeCreateElement(document, _cc_);
          if(1 - test(element.getContext))
           throw caml_maybe_attach_backtrace(Canvas_not_available, 1);
          element.width = t14;
          element.height = t16;
          var p = document.body;
          p.appendChild(element);
          redraw_funct[1] =
           function(param){
            need_redraw[1] = 0;
            var
             t165 = page.clientWidth,
             t167 = page.clientHeight,
             _eb_ = t165 !== element.width ? 1 : 0,
             _ec_ = _eb_ || (t167 !== element.height ? 1 : 0);
            if(_ec_){element.width = t165; element.height = t167;}
            var
             winH = page.clientHeight,
             winW = page.clientWidth,
             w64 = state[1] * 64 | 0,
             h64 = state[2] * 64 | 0,
             tempw = winW / w64,
             temph = winH / h64;
            state[6] = min(tempw, temph);
            state[7] = max(0., (winW - state[6] * w64) / 2.);
            state[8] = max(0., (winH - state[6] * h64) / 2.);
            var t110 = element.getContext("2d");
            t110.fillStyle = "#758c8e";
            t110.fillRect(0., 0., t165, t167);
            var _d4_ = symbol(_du_, string_of_float(t167));
            console$0.log(symbol(string_of_float(t165), _d4_));
            t110.save();
            t110.translate(state[7], state[8]);
            t110.scale(state[6], state[6]);
            var _d6_ = state[1] - 1 | 0, _d5_ = 0;
            if(_d6_ >= 0){
             var i = _d5_;
             for(;;){
              var _d__ = state[2] - 1 | 0, _d9_ = 0;
              if(_d__ >= 0){
               var j = _d9_;
               for(;;){
                draw_sprite
                 (t110,
                  tilesheet,
                  i,
                  j,
                  caml_check_bound(caml_check_bound(state[10], i)[1 + i], j)
                   [1 + j]);
                var _ea_ = j + 1 | 0;
                if(_d__ !== j){var j = _ea_; continue;}
                break;
               }
              }
              var _d$_ = i + 1 | 0;
              if(_d6_ !== i){var i = _d$_; continue;}
              break;
             }
            }
            draw_sprite(t110, tilesheet, state[3], state[4], state[5]);
            t110.restore();
            t110.fillStyle = "black";
            t110.textAlign = "start";
            t110.textBaseline = "middle";
            t110.fillText
             (caml_jsstring_of_string(symbol(_dv_, "" + state[9])), 20., 20.);
            t110.fillText
             (caml_jsstring_of_string(symbol(_dw_, "" + state[11][1])),
              20.,
              40.);
            var _d7_ = dragging[1], _d8_ = _d7_ || touching[1];
            if(! _d8_) return _d8_;
            t110.drawImage
             (tilesheet,
              dx1[1] - dx0[1],
              dy1[1] - dy0[1],
              64.,
              64.,
              0.,
              0.,
              128.,
              128.);
            var cell$0 = touched_point[2], cell = cell$0;
            for(;;){
             if(! cell) return 0;
             var content = cell[1], next = cell[2];
             t110.fillStyle = "red";
             disk(t110, content[1], content[2], 4.);
             t110.fillStyle = "blue";
             disk(t110, content[1], content[2], 2.);
             var cell = next;
            }
           };
          perform_redraw(0);
          var
           t178 =
             handler
              (function(param){
                var
                 page = document.documentElement,
                 w = page.clientWidth,
                 h = page.clientHeight,
                 _d2_ = w !== element.width ? 1 : 0,
                 _d3_ = _d2_ || (h !== element.height ? 1 : 0);
                if(_d3_){
                 var
                  winH = page.clientHeight,
                  winW = page.clientWidth,
                  w64 = state[1] * 64 | 0,
                  h64 = state[2] * 64 | 0,
                  tempw = winW / w64,
                  temph = winH / h64;
                 state[6] = min(tempw, temph);
                 state[7] = max(0., (winW - state[6] * w64) / 2.);
                 state[8] = max(0., (winH - state[6] * h64) / 2.);
                 schedule_redraw(0);
                }
                return true$0;
               });
          global.onresize = t178;
          var
           t79 =
             handler
              (function(t65){
                var
                 x0 = t65.clientX,
                 y0 = t65.clientY,
                 started = [0, 0],
                 c1 =
                   addEventListener
                    (document,
                     mousemove,
                     handler
                      (function(t67){
                        var
                         x1 = t67.clientX,
                         y1 = t67.clientY,
                         _dZ_ = 1 - started[1];
                        if(_dZ_)
                         var
                          _d0_ = 4 < abs(x1 - x0 | 0) ? 1 : 0,
                          _d1_ = _d0_ || (4 < abs(y1 - y0 | 0) ? 1 : 0);
                        else
                         var _d1_ = _dZ_;
                        if(_d1_){
                         started[1] = 1;
                         var t71 = element.style;
                         t71.cursor = cst_move;
                        }
                        if(started[1]){
                         dragging[1] = 1;
                         dx0[1] = x0;
                         dy0[1] = y0;
                         dx1[1] = x1;
                         dy1[1] = y1;
                         schedule_redraw(0);
                        }
                        stopPropagation(t67);
                        return true$0;
                       }),
                     true$0),
                 c2 = [0, no_handler];
                c2[1] =
                 addEventListener
                  (document,
                   mouseup,
                   handler
                    (function(t76){
                      removeEventListener(c1);
                      iter(c2[1], removeEventListener);
                      if(started[1]){
                       var t74 = element.style;
                       t74.cursor = cst$2;
                       t76.clientY;
                       t76.clientX;
                       dragging[1] = 0;
                       schedule_redraw(0);
                      }
                      else{t76.clientY; t76.clientX; dragging[1] = 0;}
                      return true$0;
                     }),
                   true$0);
                return true$0;
               });
          element.onmousedown = t79;
          addEventListener
           (element,
            touchstart,
            handler
             (function(t20){
               function _dE_(touch){
                var
                 id = touch.identifier,
                 x1 = touch.clientX,
                 y1 = touch.clientY;
                console$0.log(caml_call2(sprintf$0(_dr_), x1, y1));
                var
                 started = [0, 0],
                 c1 =
                   addEventListener
                    (document,
                     touchmove,
                     handler
                      (function(t28){
                        var
                         t29 = t28.changedTouches,
                         _dQ_ = t29.length - 1 | 0,
                         _dP_ = 0;
                        if(_dQ_ >= 0){
                         var i = _dP_;
                         for(;;){
                          var
                           _dR_ =
                             function(touch){
                              var _dT_ = touch.identifier === id ? 1 : 0;
                              if(_dT_){
                               var x1$0 = touch.clientX, y1$0 = touch.clientY;
                               console$0.log(caml_call2(sprintf$0(_ds_), x1$0, y1$0));
                               var _dU_ = 1 - started[1];
                               if(_dU_)
                                var
                                 _dV_ = 4 < abs(x1$0 - x1 | 0) ? 1 : 0,
                                 _dW_ = _dV_ || (4 < abs(y1$0 - y1 | 0) ? 1 : 0);
                               else
                                var _dW_ = _dU_;
                               if(_dW_){
                                clear$0(touched_point);
                                add([254, x1$0, y1$0], touched_point);
                                started[1] = 1;
                                var t40 = element.style;
                                t40.cursor = cst_move;
                               }
                               var _dX_ = started[1];
                               if(_dX_){
                                touching[1] = 1;
                                dx0[1] = x1;
                                dy0[1] = y1;
                                dx1[1] = x1$0;
                                dy1[1] = y1$0;
                                schedule_redraw(0);
                                return add([254, x1$0, y1$0], touched_point);
                               }
                               var _dY_ = _dX_;
                              }
                              else
                               var _dY_ = _dT_;
                              return _dY_;
                             };
                          iter$0(t28.changedTouches.item(i), _dR_);
                          var _dS_ = i + 1 | 0;
                          if(_dQ_ !== i){var i = _dS_; continue;}
                          break;
                         }
                        }
                        stopPropagation(t28);
                        return false$0;
                       }),
                     true$0),
                 c2 = [0, no_handler],
                 c3 = [0, no_handler];
                c2[1] =
                 addEventListener
                  (document,
                   touchend,
                   handler
                    (function(t41){
                      var
                       t42 = t41.changedTouches,
                       _dL_ = t42.length - 1 | 0,
                       _dK_ = 0;
                      if(_dL_ >= 0){
                       var i = _dK_;
                       for(;;){
                        var
                         _dM_ =
                           function(touch){
                            var _dO_ = touch.identifier === id ? 1 : 0;
                            if(! _dO_) return _dO_;
                            var x2 = touch.clientX, y2 = touch.clientY;
                            console$0.log(caml_call2(sprintf$0(_dt_), x2, y2));
                            var dx = abs(x2 - x1 | 0), dy = abs(y2 - y1 | 0);
                            if(dy < dx)
                             if(x1 < x2) handle_move(2); else handle_move(3);
                            else if(y1 < y2) handle_move(1); else handle_move(0);
                            removeEventListener(c1);
                            iter(c2[1], removeEventListener);
                            iter(c3[1], removeEventListener);
                            if(started[1]){
                             var t53 = element.style;
                             t53.cursor = cst$2;
                             touching[1] = 0;
                             return schedule_redraw(0);
                            }
                            touching[1] = 0;
                            return 0;
                           };
                        iter$0(t41.changedTouches.item(i), _dM_);
                        var _dN_ = i + 1 | 0;
                        if(_dL_ !== i){var i = _dN_; continue;}
                        break;
                       }
                      }
                      return true$0;
                     }),
                   true$0);
                c3[1] =
                 addEventListener
                  (document,
                   touchend,
                   handler
                    (function(t54){
                      var
                       t55 = t54.changedTouches,
                       _dG_ = t55.length - 1 | 0,
                       _dF_ = 0;
                      if(_dG_ >= 0){
                       var i = _dF_;
                       for(;;){
                        var
                         _dH_ =
                           function(touch){
                            var _dJ_ = touch.identifier === id ? 1 : 0;
                            if(! _dJ_) return _dJ_;
                            touch.clientX;
                            touch.clientY;
                            removeEventListener(c1);
                            iter(c2[1], removeEventListener);
                            iter(c3[1], removeEventListener);
                            if(started[1]){var t64 = element.style; t64.cursor = cst$2;}
                            touching[1] = 0;
                            return schedule_redraw(0);
                           };
                        iter$0(t54.changedTouches.item(i), _dH_);
                        var _dI_ = i + 1 | 0;
                        if(_dG_ !== i){var i = _dI_; continue;}
                        break;
                       }
                      }
                      return false$0;
                     }),
                   true$0);
                return 0;
               }
               iter$0(t20.changedTouches.item(0), _dE_);
               return false$0;
              }),
            true$0);
          function handle_key_event(t180){
           var
            change_level = [0, 0],
            event = t180.keyCode,
            retVal = [0, false$0];
           if(33 === event){
            state[9] = state[9] + 1 | 0;
            change_level[1] = 1;
           }
           else if(34 === event){
            state[9] = state[9] - 1 | 0;
            change_level[1] = 1;
           }
           else if(39 === event)
            handle_move(2);
           else if(37 === event)
            handle_move(3);
           else if(38 === event)
            handle_move(0);
           else if(40 === event)
            handle_move(1);
           else if(8 === event){
            if(1 - is_empty(state[11])){
             load_current_level(0);
             var moves = create$0(0), _dC_ = state[11][1] - 1 | 0, _dB_ = 1;
             if(_dC_ >= 1){
              var for$0 = _dB_;
              for(;;){
               var move = take(state[11]);
               add(move, moves);
               handle_move(move);
               state[5] = get_player_tile_from_dir(move);
               var _dD_ = for$0 + 1 | 0;
               if(_dC_ !== for$0){var for$0 = _dD_; continue;}
               break;
              }
             }
             clear$0(state[11]);
             var q2 = state[11];
             if(0 < moves[1]){
              var match = q2[3];
              if(match){
               q2[1] = q2[1] + moves[1] | 0;
               match[2] = moves[2];
               q2[3] = moves[3];
               clear$0(moves);
              }
              else{
               q2[1] = moves[1];
               q2[2] = moves[2];
               q2[3] = moves[3];
               clear$0(moves);
              }
             }
            }
            schedule_redraw(0);
           }
           else
            retVal[1] = true$0;
           if(change_level[1]){
            schedule_redraw(0);
            state[9] = caml_mod(maxLevels + state[9] | 0, maxLevels);
            load_current_level(0);
            state[11] = create$0(0);
            state[12] = 0;
           }
           return retVal[1];
          }
          addEventListener
           (document, keydown, handler(handle_key_event), true$0);
          return return$0(0);
         }
         var img = unsafeCreateElement(document, _ca_);
         function _dy_(param){return return$0(img);}
         var
          p = new_pending(1),
          t10 =
            handler
             (function(param){
               var p$0 = underlying(p), _dA_ = p$0[1], exn = 0;
               switch(_dA_[0]){
                 case 1:
                  if(_dA_[1] !== Canceled)
                   caml_call1(ksprintf(invalid_arg, _ch_), api_function_name);
                  break;
                 case 2:
                  var result = [0, exn]; resolve(_ci_, 0, p$0, result); break;
                 default:
                  caml_call1(ksprintf(invalid_arg, _cg_), api_function_name);
               }
               return false$0;
              });
         img.onload = t10;
         img.src = "./assets/sokoban_tilesheet.png";
         var
          p$0 = symbol_bind(symbol_bind(p, _dy_), _dz_),
          match = underlying(p$0)[1];
         switch(match[0]){
           case 1:
            var exn = match[1]; throw caml_maybe_attach_backtrace(exn, 0);
           case 2:
            var
             p_callbacks = match[1],
             callback =
               function(result){
                if(1 !== result[0]) return 0;
                var exn = result[1];
                return _cd_(exn);
               };
            add_implicitly_removed_callbac(p_callbacks, callback);
            break;
         }
         return false$0;
        };
     load_current_level(0);
     var t181 = handler(start);
     global.onload = t181;
     do_at_exit(0);
     return;
    }
   }
  }
  (globalThis));

//# sourceMappingURL=main.map
